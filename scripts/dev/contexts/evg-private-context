#!/bin/bash

set -Eeou pipefail

source scripts/evergreen/e2e/lib


# This is the default cluster name to be used for single cluster. Multi-cluster variants need to override this.
export CLUSTER_NAME="kind-e2e-cluster-1"
# In case of EVG tests, those variables need to be empty (in this case we assume an OpsManager test) or created by
# the setup_cloud_qa script. The latter case will create all credentials in $ENV_FILE. This case is handled below.
export OM_USER=""
export OM_API_KEY=""
export OM_ORGID=""
export OM_HOST=""
export OM_BASE_URL=""
# This file is used for injecting credentials when interacting with Cloud QA. Probably should be refactored
# into env vars in the future.
export ENV_FILE="$workdir/.ops-manager-env"
if [ -f "$ENV_FILE" ]; then
    source "$ENV_FILE"
fi

export NAMESPACE_FILE="$workdir/.namespace"
if [ -f "$NAMESPACE_FILE" ]; then
  NAMESPACE=$(cat "$NAMESPACE_FILE")
else
  NAMESPACE=$(generate_random_namespace)
  echo "$NAMESPACE" > "${NAMESPACE_FILE}"
fi
export NAMESPACE

export BASE_REPO_URL="268558157000.dkr.ecr.us-east-1.amazonaws.com/dev"

export REGISTRY="$BASE_REPO_URL"
export QUAY_REGISTRY=quay.io/mongodb
export OPERATOR_REGISTRY=${REGISTRY}
export INIT_IMAGES_REGISTRY=${INIT_IMAGES_REGISTRY:-${REGISTRY}}
export INIT_APPDB_REGISTRY=${INIT_IMAGES_REGISTRY}
export INIT_OPS_MANAGER_REGISTRY=${INIT_IMAGES_REGISTRY-"${QUAY_REGISTRY}"}
export INIT_DATABASE_REGISTRY=${INIT_IMAGES_REGISTRY:-"${QUAY_REGISTRY}"}
export DATABASE_REGISTRY=${INIT_IMAGES_REGISTRY:-"${QUAY_REGISTRY}"}
export OPS_MANAGER_REGISTRY=${QUAY_REGISTRY}
export APPDB_REGISTRY=${QUAY_REGISTRY}
export MONGODB_ENTERPRISE_DATABASE_IMAGE="${INIT_IMAGES_REGISTRY}/mongodb-enterprise-database"
export INIT_DATABASE_IMAGE_REPOSITORY="${INIT_IMAGES_REGISTRY}/mongodb-enterprise-init-database"

# these are needed to deploy OM
export INIT_APPDB_IMAGE_REPOSITORY="${INIT_IMAGES_REGISTRY}/mongodb-enterprise-init-appdb"
export OPS_MANAGER_IMAGE_REPOSITORY="${QUAY_REGISTRY}/mongodb-enterprise-ops-manager-ubi"
export INIT_OPS_MANAGER_IMAGE_REPOSITORY=${INIT_IMAGES_REGISTRY}/mongodb-enterprise-init-ops-manager

export CLUSTER_TYPE="kind"
# Empty sting means that we're not using it.
export EVG_HOST_NAME=""
export GOROOT="/opt/golang/go1.21"
# shell.exec EVG Task doesn't have add_to_path, so we need to explicitly add those things here.
if [[ ! $PATH =~ .*${workdir:-.}/bin.* ]]; then
  export PATH=$PATH:${workdir:-.}/bin
fi
if [[ ! $PATH =~ .*$GOROOT/bin.* ]]; then
  export PATH=$GOROOT/bin:$PATH
fi

export LOCAL_OPERATOR="false"

export AWS_ACCESS_KEY_ID="$mms_eng_test_aws_access_key"
export AWS_SECRET_ACCESS_KEY="$mms_eng_test_aws_secret"
export AWS_DEFAULT_REGION="$mms_eng_test_aws_region"

# setup_cloud_qa.py
# In EVG we use two sorts of credentials to avoid 200 org and keys limitation.
if [[ $context == "e2e_mdb_kind_ubi_cloudqa" ]]; then
  export e2e_cloud_qa_orgid_owner="${e2e_cloud_qa_orgid_owner_ubi_cloudqa}"
  export e2e_cloud_qa_apikey_owner="${e2e_cloud_qa_apikey_owner_ubi_cloudqa}"
  export e2e_cloud_qa_user_owner="${e2e_cloud_qa_user_owner_ubi_cloudqa}"
elif [[ $context == "root-context" ]]; then
  echo "Skipping setting Cloud QA credentials for root builds"
else
  export e2e_cloud_qa_orgid_owner="${e2e_cloud_qa_orgid_owner_ubi_cloudqa_2}"
  export e2e_cloud_qa_apikey_owner="${e2e_cloud_qa_apikey_owner_ubi_cloudqa_2}"
  export e2e_cloud_qa_user_owner="${e2e_cloud_qa_user_owner_ubi_cloudqa_2}"
fi

export e2e_cloud_qa_baseurl="https://cloud-qa.mongodb.com"

export kubernetes_kind_version=1.22.0

# Note: this name is correct
export task_id="$EVR_TASK_ID"

export OTEL_TRACE_ID="${otel_trace_id}"
export OTEL_PARENT_ID="${otel_parent_id}"
export OTEL_COLLECTOR_ENDPOINT="${otel_collector_endpoint}"

# This is given by an expansion from evg
export TASK_NAME="${task_name:-"unknown"}"
export task_name="${TASK_NAME}"
