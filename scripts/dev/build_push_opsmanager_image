#!/usr/bin/env bash
set -euo pipefail

cd "$(git rev-parse --show-toplevel || echo "Failed to find git root"; exit 1)"

source scripts/dev/set_env_context
source scripts/funcs/checks
source scripts/funcs/kubernetes
source scripts/funcs/errors
source scripts/funcs/printing

docker_build() {
    prepare_ops_manager_build

    docker build \
        -t ${repo_name} \
        --build-arg OM_DOWNLOAD_LINK=${download_url} .
}

docker_push() {
    repo_name="$(echo ${full_url} | cut -d "/" -f2-)" # cutting the domain part
    docker_build

    docker tag ${repo_name} ${full_url}
    docker push ${full_url}
}
submit_kaniko() {
    destination=${full_url} \
        context=s3://operator-kubernetes-build/ops-manager-operator/${version_id}/${IMAGE_TYPE}/contexts/om-context.tar.gz \
        cache_repo=268558157000.dkr.ecr.us-east-1.amazonaws.com/cache/mongodb-enterprise-ops-manager \
        label=ops-manager-${IMAGE_TYPE}-${version_id} \
        build_args="OM_DOWNLOAD_LINK=${download_url}" \
        ../../scripts/evergreen/build_docker_image.sh
}

# Building the init image - either to local repo or to the remote one (ECR)

check_mandatory_param "${init_om_version-}" "init_om_version"

title "Building Init Ops Manager image (init om version: ${init_om_version})..."

pushd "${PWD}"
cd docker/mongodb-enterprise-init-ops-manager || exit

if [[ ${REPO_TYPE} = "ecr" ]]; then
    ensure_ecr_repository "${REPO_URL}/mongodb-enterprise-init-ops-manager"
fi

# TODO: include the build id
build_id=$(date +%Y%m%d)

repo_name="mongodb-enterprise-init-ops-manager:${init_om_version}"
full_url="${REPO_URL}/${repo_name}"
docker build -t "${repo_name}" --build-arg VERSION=${init_om_version} .
docker tag "${repo_name}" "${full_url}"
docker push "${full_url}"
title "Init Ops Manager image successfully built and pushed to ${REPO_TYPE} registry"


# will be removed in coming PR: OpsManager build will be independent

om_download_url() {
    check_mandatory_param "${1-}" "om_version"
    om_version=${1}
    # first search in current releases
    link=$(curl -l https://info-mongodb-com.s3.amazonaws.com/com-download-center/ops_manager_release_archive.json | \
              jq -r '.currentReleases[] | select(.version == "'"${om_version}"'") | .platform[] | select(.package_format=="deb") | select(.arch=="x86_64") | .packages.links[] | select(.name=="tar.gz") | .download_link')

    # searching in old releases
    [[ -z ${link} ]] && link=$(curl -l https://info-mongodb-com.s3.amazonaws.com/com-download-center/ops_manager_release_archive.json | \
              jq -r '.oldReleases[] | select(.version == "'"${om_version}"'") | .platform[] | select(.package_format=="deb") | select(.arch=="x86_64") | .packages.links[] | select(.name=="tar.gz") | .download_link')

    echo ${link}
}


# 1. First we need to find out the download_url necessary for image build

check_mandatory_param "${om_version-}" "om_version"

title "Building Ops Manager image (om version: ${om_version})..."

if [[ -z ${download_url-} ]]; then
    echo "Download url is not provided, so fetching it from the official Ops Manager binaries json"
    download_url=$(om_download_url $om_version)

    [[ -z ${download_url} ]] && fatal "Failed to find download link for version $om_version"
fi

echo "The download url for ${om_version} is ${download_url}"


# 2. Building the image - either to local repo or to the remote one (ECR)

# note that in non local runs we want to build images with suffix (operator version).
if [[ "${LOCAL_RUN-}" = false ]]; then
    image_suffix="-operator$(git describe --dirty)"
    echo "Using image suffix (operator version) ${image_suffix} for building images"
fi

popd
cd docker/mongodb-enterprise-ops-manager || exit

if [[ ${REPO_TYPE} = "ecr" ]]; then
    ensure_ecr_repository "${REPO_URL}/mongodb-enterprise-ops-manager"
fi

full_url="${REPO_URL}/mongodb-enterprise-ops-manager:${om_version}${image_suffix-}"

if [[ -n ${kaniko-} ]]; then
    # Note, that before submitting kaniko build the context needs to be uploaded to S3 - this is outside
    # of the scope for current script
    submit_kaniko
    title "Kaniko job for building Ops Manager image successfully created"
else
    docker_push
    title "Ops Manager image successfully built and pushed to ${REPO_TYPE} registry"
fi
