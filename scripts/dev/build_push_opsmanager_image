#!/usr/bin/env bash
set -euo pipefail

cd "$(git rev-parse --show-toplevel || echo "Failed to find git root"; exit 1)"

source scripts/dev/set_env_context

title "Building Ops Manager image..."

check_mandatory_param "${om_version-}" "om_version"

if [[ -z ${download_url-} ]]; then
    echo "Download url is not provided, so fetching it from the official Ops Manager binaries json"
    download_url=$(om_download_url $om_version)

    [[ -z ${download_url} ]] && fatal "Failed to find download link for version $om_version"
    echo "The download url for ${om_version} is ${download_url}"
fi

# note that in non local runs we want to build images with suffix (operator version).
if [[ "${LOCAL_RUN-}" = false ]]; then
    image_suffix="-operator$(git describe --dirty)"
    echo "Using image suffix (operator version) ${image_suffix} for building images"
fi

if [[ ${REPO_TYPE} = "local" ]]; then
    eval "$(minikube docker-env)"
    make -C docker/mongodb-enterprise-ops-manager build IMAGE_DIR=local IMAGE_TYPE="${IMAGE_TYPE}" IMAGE_SUFFIX=${image_suffix-}
    title "Ops Manager image successfully built"
elif [[ ${REPO_TYPE} = "ecr" ]]; then
    repo_host="$(echo ${REPO_URL} | cut -d "/" -f 1)"
    repo_name="$(echo ${REPO_URL} | cut -d "/" -f 2)"

    ensure_ecr_repository "${repo_name}/${IMAGE_TYPE}/mongodb-enterprise-ops-manager"

    make -C docker/mongodb-enterprise-ops-manager push IMAGE_DIR="${repo_name}" AWS_IMAGE_REPO="${repo_host}" \
            IMAGE_TYPE="${IMAGE_TYPE}" IMAGE_VERSION="${om_version}" OM_DOWNLOAD_LINK="${download_url}" \
            IMAGE_SUFFIX=${image_suffix-}

    title "Ops Manager image successfully built and pushed to the ECR registry"
elif [[ ${REPO_TYPE} = "quay" ]]; then
    title "Skipping build of the Ops Manager as current Docker registry is quay.io"
fi
