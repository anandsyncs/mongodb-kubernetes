#!/usr/bin/env bash
set -euo pipefail

cd "$(git rev-parse --show-toplevel || echo "Failed to find git root"; exit 1)"

source scripts/dev/set_env_context

# Script builds and optionally pushes the test image
# Note, that unlike corresponding scripts for operator/database it adds the tag to the image - this is because our
# e2e procedure in Evergreen uses the same repo and git SHA is the only way to isolate different images - we just use the
# same approach

title "Building e2e tests application image..."

TEST_IMAGE_TAG=$(git rev-parse HEAD)

if [[ ${REPO_TYPE} = "local" ]]; then
    eval "$(minikube docker-env)"
    docker build -t local/mongodb-enterprise-tests "docker/mongodb-enterprise-tests:${TEST_IMAGE_TAG}"
    title "Enterprise tests image successfully built"
elif [[ ${REPO_TYPE} = "ecr" ]]; then
    # note that 'aws login' should be called before - 'make' takes care of it
    repo_name="$(echo ${REPO_URL} | cut -d "/" -f 2)"

    ensure_ecr_repository "${repo_name}/${IMAGE_TYPE}/mongodb-enterprise-tests"

    docker build -t "${repo_name}"/mongodb-enterprise-tests:${TEST_IMAGE_TAG} docker/mongodb-enterprise-tests
    docker tag "${repo_name}"/mongodb-enterprise-tests:${TEST_IMAGE_TAG} "${REPO_URL}"/mongodb-enterprise-tests:${TEST_IMAGE_TAG}
    docker push "${REPO_URL}"/mongodb-enterprise-tests:${TEST_IMAGE_TAG}

    title "Enterprise tests successfully built and pushed to the ECR registry"
elif [[ ${REPO_TYPE} = "quay" ]]; then
    title "Skipping build of the database as current Docker registry is quay.io"
fi
