#!/usr/bin/env bash

set -euo pipefail

# script starts OM in Evergreen if it's not started already and dumps its information (api_keys etc) into ~/.operator-dev
# directory for# later usage


cd "$(git rev-parse --show-toplevel || echo "Failed to find git root"; exit 1)"

source scripts/funcs/checks
source scripts/funcs/printing
source scripts/dev/set_env_context

# package url can be passed as an argument or as an environment variable (could be set by dev/set_env_context)
PACKAGE_URL="${1:-$OPS_MANAGER_PACKAGE_URL}"


# the function installs Ops Manager into Evergreen host via ego
ensure_ops_manager_evg() {
    om_package="$1"

    title "Installing Ops Manager into Evergreen using ego (from $om_package)"

    check_app "evg" \
                "evg script is not installed or you need to switch virtual environment, follow instruction at https://wiki.corp.mongodb.com/display/MMS/Ops+Manager+Release+setup+guide#OpsManagerReleasesetupguide-First-timeonly to make it work";

    # TODO this check can definitely be improved (walk through ubuntu1804-build hosts and find installed OMs)
    if evg list | grep "ubuntu1804-build" | grep -qi "running"; then
        OPS_MANAGER_HOST=$(evg list | grep "ubuntu1804-build" | grep -i "running" | head -n 1 | awk ' {print $3} ' | cut -d "@" -f 2)
        export OPS_MANAGER_HOST
        echo "There is an Evergreen instance (${OPS_MANAGER_HOST}) running already - skipping ego installaton"
        return
    fi

    # download ego script
    check_env_var "GITHUB_TOKEN" "To download ego you need to specify the 'GITHUB_TOKEN' environment variable (https://github.com/settings/tokens/new) with 'repo' scope"

    echo "Downloading ego script"
    curl -L "https://${GITHUB_TOKEN}@raw.githubusercontent.com/10gen/mms/master/scripts/ops_manager/ego" -o ego && chmod +x ego

    # provision evergreen host
    echo "Spawning new VM in Evergreen..."

    evg spawn ubuntu1804-build

    while ! evg list | grep "ubuntu1804-build"  | grep -qi "running"; do printf .; sleep 3; done

    host=$(evg list | awk ' {print $3} ' | cut -d "@" -f 2)

    ./ego seed "ubuntu@${host}"

    echo "Deploying Ops Manager from $om_package"

    # todo move version to some configuration
    # note, that we use OM 4.1 for development to differ from e2e suites (they use 4.0+)
    ./ego nohup "ubuntu@${host}" ego scenario_install_package_from_link --url "${om_package}" --central-url "http://${host}:9080"

    if ! ./ego tail "ubuntu@$host"; then
        # seems 'tail' throws an error after finish which is not relevant
        # another thing that is used in mms: './ego wait_for_open_port $host 9080'
        echo "WARN: Ego tail exited with non-zero code $?, but most of all everything is ok!"
    fi

    export OPS_MANAGER_HOST=${host}

    # add ssh host key to known hosts
    ssh-keyscan "$OPS_MANAGER_HOST" >> ~/.ssh/known_hosts

    rm ego

    title "Ops Manager is ready! Hostname: ${OPS_MANAGER_HOST}"
}


# start ops manager
ensure_ops_manager_evg "${PACKAGE_URL:-https://downloads.mongodb.com/on-prem-mms/deb/mongodb-mms_4.2.0.56551.20190812T1752Z-1_x86_64.deb}"

# overwrite the connectivity data for current context
mkdir -p ~/.operator-dev

if ! ssh "ubuntu@${OPS_MANAGER_HOST}" cat "~/om" &> /dev/null; then
  # generate environment data on the first run
  echo "Configuring host ${OPS_MANAGER_HOST}"
  rm ~/.operator-dev/om || true

  # todo the script just creates a user - we need to create a test organization as well
  docker/mongodb-enterprise-ops-manager-dev/scripts/configure-ops-manager.py \
    "http://${OPS_MANAGER_HOST}:9080" ~/.operator-dev/om

  echo "Ops Manager Environment:"
  cat ~/.operator-dev/om

  scp ~/.operator-dev/om "ubuntu@${OPS_MANAGER_HOST}:om"
else
  echo "There is already an env file on ${OPS_MANAGER_HOST} - reusing it"
fi

# copying the env data back to the local context to overwrite previous one
scp "ubuntu@${OPS_MANAGER_HOST}:om" ~/.operator-dev/om > /dev/null
chmod +x ~/.operator-dev/om

source "$HOME/.operator-dev/om"

echo "Your Ops Manager is installed on $OM_HOST - don't forget to extend its expiration manually in Evergreen (https://evergreen.mongodb.com/spawn)!"
