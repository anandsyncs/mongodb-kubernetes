#!/usr/bin/env bash

set -euo pipefail

# script starts OM in Evergreen if it's not started already and dumps its information (api_keys etc) into ~/.operator-dev
# directory for# later usage


cd "$(git rev-parse --show-toplevel || echo "Failed to find git root"; exit 1)"

source scripts/funcs
source scripts/dev/set_env_context

# package url can be passed as an argument or as an environment variable (could be set by dev/set_env_context)
PACKAGE_URL="${1:-$OPS_MANAGER_PACKAGE_URL}"

# start ops manager
ensure_ops_manager_evg "${PACKAGE_URL:-https://downloads.mongodb.com/on-prem-mms/deb/mongodb-mms_4.2.0.56551.20190812T1752Z-1_x86_64.deb}"

# overwrite the connectivity data for current context
mkdir -p ~/.operator-dev

if ! ssh "ubuntu@${OPS_MANAGER_HOST}" cat "~/om" &> /dev/null; then
  # generate environment data on the first run
  echo "Configuring host ${OPS_MANAGER_HOST}"
  rm ~/.operator-dev/om || true

  # todo the script just creates a user - we need to create a test organization as well
  docker/mongodb-enterprise-ops-manager-dev/scripts/configure-ops-manager.py \
    "http://${OPS_MANAGER_HOST}:9080" ~/.operator-dev/om

  echo "Ops Manager Environment:"
  cat ~/.operator-dev/om

  scp ~/.operator-dev/om "ubuntu@${OPS_MANAGER_HOST}:om"
else
  echo "There is already an env file on ${OPS_MANAGER_HOST} - reusing it"
fi

# copying the env data back to the local context to overwrite previous one
scp "ubuntu@${OPS_MANAGER_HOST}:om" ~/.operator-dev/om > /dev/null
chmod +x ~/.operator-dev/om

source "$HOME/.operator-dev/om"

echo "Your Ops Manager is installed on $OM_HOST - don't forget to extend its expiration manually in Evergreen (https://evergreen.mongodb.com/spawn)!"
