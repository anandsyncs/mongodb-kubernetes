#!/usr/bin/env bash

set -o nounset
set -o errexit
set -o pipefail

cd "$(git rev-parse --show-toplevel)"

# --dirty to flag changes to your working tree
RELEASE_VERSION=$(git describe --dirty)

# for running Operator locally we don't specify version (as the Operator version affects the OM/AppDB image used when
# deploying OM resource)
[[ -n "${LOCAL_RUN-}" ]] && RELEASE_VERSION=""

# build stripped binary for linux with appropriate release version set
if [[ "$(uname)" != 'Linux' ]]; then
    export GOOS='linux'
fi

export GO111MODULE=on
export GOFLAGS="-mod=vendor"

if [[ -z ${LOG_AUTOMATION_CONFIG_DIFF-} ]]; then
    LOG_AUTOMATION_CONFIG_DIFF="false"
fi

mdb_version="$(jq --raw-output .appDbBundledMongoDbVersion < release.json)"
echo "Using MongoDB version ${mdb_version}-ent for the AppDB"

if [[ ${DEBUG-} = "True" ]]; then
    echo "Building Operator binary in 'debug' mode..."
    go build -gcflags "-N -l" -o docker/mongodb-enterprise-operator/content/mongodb-enterprise-operator \
      -ldflags="-X github.com/10gen/ops-manager-kubernetes/pkg/util.OperatorVersion=${RELEASE_VERSION} -X github.com/10gen/ops-manager-kubernetes/pkg/util.LogAutomationConfigDiff=${LOG_AUTOMATION_CONFIG_DIFF} -X github.com/10gen/ops-manager-kubernetes/pkg/util.BundledAppDbMongoDBVersion=${mdb_version}"
else
    echo "Building Operator binary..."
    go build -i -o docker/mongodb-enterprise-operator/content/mongodb-enterprise-operator \
        -ldflags="-s -w -X github.com/10gen/ops-manager-kubernetes/pkg/util.OperatorVersion=${RELEASE_VERSION} -X github.com/10gen/ops-manager-kubernetes/pkg/util.LogAutomationConfigDiff=${LOG_AUTOMATION_CONFIG_DIFF} -X github.com/10gen/ops-manager-kubernetes/pkg/util.BundledAppDbMongoDBVersion=${mdb_version}"

fi

echo "Operator successfully built (version ${RELEASE_VERSION})"
