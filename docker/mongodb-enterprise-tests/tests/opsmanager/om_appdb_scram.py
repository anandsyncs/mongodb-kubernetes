import pytest

from kubetester.kubetester import skip_if_local
from kubetester.automation_config_tester import AutomationConfigTester

from tests.opsmanager.om_base import OpsManagerBase

OM_RESOURCE_NAME = "om-scram"
OM_USER_NAME = "mongodb-ops-manager"
USER_DEFINED_PASSWORD = "my-scram-password"
UPDATED_USER_DEFINED_PASSWORD = f"updated-{USER_DEFINED_PASSWORD}"
AUTO_GENERATED_PASSWORD = ""
EXPECTED_OM_USER_ROLES = {
    ("admin", "readWriteAnyDatabase"),
    ("admin", "dbAdminAnyDatabase"),
    ("admin", "clusterMonitor"),
}


@pytest.mark.e2e_om_appdb_scram
class TestOpsManagerCreation(OpsManagerBase):
    """
    name: Ops Manager successful creation
    description: |
      Creates an Ops Manager instance with AppDB of size 3. This test waits until Ops Manager
      is ready to avoid changing password before Ops Manager has reached ready state
    create:
      file: om_appdb_scram.yaml
      wait_until: appdb_in_running_state
      timeout: 800
    """

    def test_appdb(self):
        assert self.om_cr.get_appdb_status()["members"] == 3
        assert self.om_cr.get_appdb_status()["version"] == "4.0.0"

    def test_admin_config_map(self):
        assert AutomationConfigTester(
            self.get_appdb_automation_config()
        ).reached_version(1)

    @skip_if_local
    def test_mongod(self):
        mdb_tester = self.om_cr.get_appdb_mongo_tester()
        mdb_tester.assert_connectivity()
        mdb_tester.assert_version("4.0.0")

    def test_appdb_automation_config(self):
        # only user should be the Ops Manager user
        tester = AutomationConfigTester(
            self.get_appdb_automation_config(),
            expected_users=1,
            authoritative_set=False,
        )
        tester.assert_authentication_mechanism_enabled("MONGODB-CR")
        tester.assert_has_user(OM_USER_NAME)
        tester.assert_user_has_roles(OM_USER_NAME, EXPECTED_OM_USER_ROLES)

    @skip_if_local
    def test_appdb_scram_sha(self):
        app_db_tester = self.om_cr.get_appdb_mongo_tester()

        global AUTO_GENERATED_PASSWORD
        AUTO_GENERATED_PASSWORD = self.get_appdb_password()
        # should be possible to auth as the operator will have auto generated a password
        app_db_tester.assert_scram_sha_authentication(
            OM_USER_NAME, AUTO_GENERATED_PASSWORD, auth_mechanism="SCRAM-SHA-1"
        )


@pytest.mark.e2e_om_appdb_scram
class TestChangeOpsManagerUserPassword(OpsManagerBase):
    """
    name: Change Ops Manager user's password
    description: |
      Creates a secret with a new password that the Ops Manager user should use and ensures that
      SCRAM is configured correctly with the new password
    update:
      patch: '[{"op":"add","path":"/spec/applicationDatabase/passwordSecretKeyRef","value": {"name": "my-password", "key": "new-key"}}]'
      file: om_appdb_scram.yaml
      timeout: 800
      wait_until: om_in_running_state
    """

    @classmethod
    def setup_class(cls):
        cls.wait_until(cls.om_in_running_state, 900)
        cls.create_secret(
            cls.get_namespace(), "my-password", {"new-key": USER_DEFINED_PASSWORD}
        )
        super().setup_class()

    @pytest.mark.xfail(
        reason="the auto generated password should have been deleted once the user creates their own"
    )
    def test_auto_generated_password_exists(self):
        self.get_appdb_password()

    def test_config_map_reached_v2(self):
        # should reach version 2 as a password has changed, resulting in new ScramShaCreds
        assert AutomationConfigTester(
            self.get_appdb_automation_config()
        ).reached_version(2)

    def test_appdb_automation_config(self):
        tester = AutomationConfigTester(
            self.get_appdb_automation_config(),
            expected_users=1,
            authoritative_set=False,
        )
        tester.assert_authentication_mechanism_enabled("MONGODB-CR")
        tester.assert_has_user(OM_USER_NAME)
        tester.assert_user_has_roles(OM_USER_NAME, EXPECTED_OM_USER_ROLES)

    @skip_if_local
    def test_authenticate_with_user_password(self):
        app_db_tester = self.om_cr.get_appdb_mongo_tester()
        password = self.read_secret(self.get_namespace(), "my-password")["new-key"]
        assert password == USER_DEFINED_PASSWORD
        app_db_tester.assert_scram_sha_authentication(
            OM_USER_NAME, password, auth_mechanism="SCRAM-SHA-1"
        )

    @skip_if_local
    def test_cannot_authenticate_with_old_autogenerated_password(self):
        app_db_tester = self.om_cr.get_appdb_mongo_tester()
        app_db_tester.assert_scram_sha_authentication_fails(
            OM_USER_NAME, AUTO_GENERATED_PASSWORD, auth_mechanism="SCRAM-SHA-1"
        )


@pytest.mark.e2e_om_appdb_scram
class TestChangeOpsManagerExistingUserPassword(OpsManagerBase):
    """
    name: Change Ops Manager user's password
    description: |
      Updating the secret should trigger another reconciliation because the
      Operator should be watching the user created secret.
    update:
      file: om_appdb_scram.yaml
      timeout: 800
      wait_until: om_in_running_state
    """

    @classmethod
    def setup_class(cls):
        cls.wait_until(cls.om_in_running_state, 900)
        cls.update_secret(
            cls.get_namespace(),
            "my-password",
            {"new-key": UPDATED_USER_DEFINED_PASSWORD},
        )
        super().setup_class()

    @pytest.mark.xfail(
        reason="the auto generated password should have been deleted once the user creates their own"
    )
    def test_auto_generated_password_exists(self):
        self.get_appdb_password()

    def test_config_map_reached_v3(self):
        # should reach version 3 as a password has changed, resulting in new ScramShaCreds
        assert AutomationConfigTester(
            self.get_appdb_automation_config()
        ).reached_version(3)

    def test_appdb_automation_config(self):
        tester = AutomationConfigTester(
            self.get_appdb_automation_config(),
            expected_users=1,
            authoritative_set=False,
        )
        tester.assert_authentication_mechanism_enabled("MONGODB-CR")
        tester.assert_has_user(OM_USER_NAME)
        tester.assert_user_has_roles(OM_USER_NAME, EXPECTED_OM_USER_ROLES)

    @skip_if_local
    def test_authenticate_with_user_password(self):
        app_db_tester = self.om_cr.get_appdb_mongo_tester()
        password = self.read_secret(self.get_namespace(), "my-password")["new-key"]
        assert password == UPDATED_USER_DEFINED_PASSWORD
        app_db_tester.assert_scram_sha_authentication(
            OM_USER_NAME, password, auth_mechanism="SCRAM-SHA-1"
        )

    @skip_if_local
    def test_cannot_authenticate_with_old_autogenerated_password(self):
        app_db_tester = self.om_cr.get_appdb_mongo_tester()
        app_db_tester.assert_scram_sha_authentication_fails(
            OM_USER_NAME, AUTO_GENERATED_PASSWORD, auth_mechanism="SCRAM-SHA-1"
        )


@pytest.mark.e2e_om_appdb_scram
class TestOpsManagerGeneratesNewPasswordIfNoneSpecified(OpsManagerBase):
    """
    name: Fall back to auto generated password
    description: |
      Creates a secret with a new password that the Ops Manager user should use and ensures that
      SCRAM is configured correctly with the new password
    update:
      file: om_appdb_scram.yaml
      patch: '[{"op":"add","path":"/spec/applicationDatabase/passwordSecretKeyRef","value": {"name": "", "key": ""}}]'
      wait_until: om_in_running_state
      timeout: 1200
    """

    def test_new_password_was_created(self):
        self.get_appdb_password()

    def test_wait_for_config_map_reached_v4(self):
        # should reach version 3 as password should change back
        assert AutomationConfigTester(
            self.get_appdb_automation_config()
        ).reached_version(4)

    @skip_if_local
    def test_cannot_authenticate_with_old_password(self):
        app_db_tester = self.om_cr.get_appdb_mongo_tester()
        app_db_tester.assert_scram_sha_authentication_fails(
            OM_USER_NAME, USER_DEFINED_PASSWORD, auth_mechanism="SCRAM-SHA-1"
        )

    @skip_if_local
    def test_authenticate_with_user_password(self):
        app_db_tester = self.om_cr.get_appdb_mongo_tester()
        password = self.get_appdb_password()
        assert (
            password != AUTO_GENERATED_PASSWORD
        ), "new password should have been generated"
        app_db_tester.assert_scram_sha_authentication(
            OM_USER_NAME, password, auth_mechanism="SCRAM-SHA-1"
        )
