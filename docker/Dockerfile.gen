#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# * Dockerfile.gen
#
# Generates a Dockerfile by using `Dockerfile.template` and the values
# for `ubuntu`, `rhel` or `dcar` distros.  It needs to be called with first
# argument being one of the supported distros.
#
# The result of the execution will be printed to stdout so it needs to
# be redirected into a Dockerfile.
#
# * Usage:
#
#     ./Dockerfile.gen <distro> > Dockerfile
#
# It is required that the `Dockerfile.template` to exist in the
# current working directory.
#

from typing import Dict, List, Union
from pathlib import Path
import json
import os
import sys

import jinja2


def get_version() -> str:
    """Returns the current version of the operator based on the
    release.json file. It find the release.json file in this directory
    and every parent directory up to the root.
    """
    def release(p: Path):
        if Path("/") == p:
            return

        if os.path.exists(os.path.join(p, "release.json")):
            return os.path.join(p, "release.json")
        else:
            return release(p.parent)

    release_path = release(Path(os.getcwd()))
    with open(release_path) as fd:
        release_json = json.loads(fd.read())
        return release_json["mongodbOperator"]


def ubuntu() -> Dict[str, Union[str, List[str]]]:
    """Ubuntu distro data (only for the Database image)"""
    # Note, that the Automation Agent needs lsb-release on the CLI to determine the current distro
    version = get_version()

    return {
        "base_image": "ubuntu:16.04",
        "distro": "ubuntu",
        "version": version
    }


def rhel() -> Dict[str, Union[str, List[str]]]:
    """RHEL distro data (only for the Database image)"""
    return {
        "base_image": "registry.access.redhat.com/ubi7/ubi-minimal",
        "distro": "rhel",
        "version": get_version(),
    }


def dcar() -> Dict[str, Union[str, List[str]]]:
    """RHEL distro data (only for the Database image)"""
    # dcar release for disconnected network, avoid packages with epel dependencies
    return {
        # base image is hardened ubi7 provided by dsop
        "base_image": "nexus-docker.52.61.140.4.nip.io/dsop/ubi7",
        "distro": "dcar",
        "local_repo": "nexus.52.61.140.4.nip.io/repository",
        "version": get_version(),
    }


def render(distro: str, is_appdb: bool, is_debug: bool):
    if getattr(sys.modules[__name__], distro, None) is None:
        raise ValueError("{} is not a valid distro name.".format(distro))

    template_params = getattr(sys.modules[__name__], distro)()
    template_params["is_appdb"] = is_appdb
    template_params["is_debug"] = is_debug

    env = jinja2.Environment()
    env.loader = jinja2.FileSystemLoader(".")

    return env.get_template("Dockerfile.{}".format(distro)).render(template_params)


if __name__ == "__main__":
    distro = sys.argv[1]
    # TODO support for key->value parameters
    try:
        is_appdb = bool(sys.argv[2])
    except IndexError:
        is_appdb = False
    try:
        is_debug = sys.argv[3] == 'True'
    except IndexError:
        is_debug = False

    print(render(distro, is_appdb, is_debug))
