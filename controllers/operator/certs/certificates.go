package certs

import (
	"fmt"
	"net/url"
	"strings"

	mdbv1 "github.com/10gen/ops-manager-kubernetes/api/v1/mdb"
	"github.com/hashicorp/go-multierror"
	mdbcv1 "github.com/mongodb/mongodb-kubernetes-operator/api/v1"
	"golang.org/x/xerrors"

	"github.com/10gen/ops-manager-kubernetes/controllers/operator/secrets"
	"github.com/10gen/ops-manager-kubernetes/controllers/operator/workflow"
	"go.uber.org/zap"

	enterprisepem "github.com/10gen/ops-manager-kubernetes/controllers/operator/pem"
	"github.com/10gen/ops-manager-kubernetes/pkg/dns"
	"github.com/10gen/ops-manager-kubernetes/pkg/kube"
	"github.com/10gen/ops-manager-kubernetes/pkg/multicluster"
	"github.com/10gen/ops-manager-kubernetes/pkg/util"
	"github.com/10gen/ops-manager-kubernetes/pkg/vault"

	"github.com/mongodb/mongodb-kubernetes-operator/pkg/kube/secret"
	corev1 "k8s.io/api/core/v1"

	"github.com/10gen/ops-manager-kubernetes/pkg/util/stringutil"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
)

type certDestination string

const (
	OperatorGeneratedCertSuffix = "-pem"
	CertHashAnnotationkey       = "certHash"

	Unused     = "unused"
	Database   = "database"
	OpsManager = "opsmanager"
	AppDB      = "appdb"
)

// CreatePEMSecretClient creates a PEM secret from the original secretName.
func CreatePEMSecretClient(secretClient secrets.SecretClient, secretNamespacedName types.NamespacedName, data map[string]string, ownerReferences []metav1.OwnerReference, podType certDestination) error {
	operatorGeneratedSecret := secretNamespacedName
	operatorGeneratedSecret.Name = fmt.Sprintf("%s%s", secretNamespacedName.Name, OperatorGeneratedCertSuffix)

	secretBuilder := secret.Builder().
		SetName(operatorGeneratedSecret.Name).
		SetNamespace(operatorGeneratedSecret.Namespace).
		SetStringMapToData(data).
		SetOwnerReferences(ownerReferences)

	var path string
	if vault.IsVaultSecretBackend() && podType != Unused {
		switch podType {
		case Database:
			path = secretClient.VaultClient.DatabaseSecretPath()
		case OpsManager:
			path = secretClient.VaultClient.OpsManagerSecretPath()
		case AppDB:
			path = secretClient.VaultClient.AppDBSecretPath()
		default:
			return xerrors.Errorf("unexpected pod type got: %s", podType)
		}
	}

	return secretClient.PutSecretIfChanged(secretBuilder.Build(), path)
}

// VerifyTLSSecretForStatefulSet verifies a `Secret`'s `StringData` is a valid
// certificate, considering the amount of members for a resource named on
// `opts`.
func VerifyTLSSecretForStatefulSet(secretData map[string][]byte, opts Options) (string, error) {
	crt, key := secretData["tls.crt"], secretData["tls.key"]

	// add a line break to the end of certificate when performing concatenation
	crtString := string(crt)
	if !strings.HasSuffix(crtString, "\n") {
		crtString = crtString + "\n"
	}
	crt = []byte(crtString)

	data := append(crt, key...)

	var additionalDomains []string
	for i := range getPodNames(opts) {
		additionalDomains = append(additionalDomains, GetAdditionalCertDomainsForMember(opts, i)...)
	}
	if opts.ExternalDomain != nil {
		additionalDomains = append(additionalDomains, "*."+*opts.ExternalDomain)
	}

	if err := validatePemData(data, additionalDomains); err != nil {
		return "", err
	}
	return string(data), nil
}

// VerifyAndEnsureCertificatesForStatefulSet ensures that the provided certificates are correct.
// If the secret is of type kubernetes.io/tls, it creates a new secret containing the concatenation fo the tls.crt and tls.key fields
func VerifyAndEnsureCertificatesForStatefulSet(secretReadClient, secretWriteClient secrets.SecretClient, secretName string, opts Options, log *zap.SugaredLogger) error {

	needToCreatePEM := false
	var err error
	var secretData map[string][]byte
	var s corev1.Secret
	var databaseSecretPath string

	if vault.IsVaultSecretBackend() {
		needToCreatePEM = true
		databaseSecretPath = secretReadClient.VaultClient.DatabaseSecretPath()
		secretData, err = secretReadClient.VaultClient.ReadSecretBytes(fmt.Sprintf("%s/%s/%s", databaseSecretPath, opts.Namespace, secretName))
		if err != nil {
			return err
		}

	} else {
		s, err = secretReadClient.KubeClient.GetSecret(kube.ObjectKey(opts.Namespace, secretName))
		if err != nil {
			return err
		}

		// SecretTypeTLS is kubernetes.io/tls
		// This is the standard way in K8S to have secrets that hold TLS certs
		// And it is the one generated by cert manager
		// These type of secrets contain tls.crt and tls.key entries
		if s.Type == corev1.SecretTypeTLS {
			needToCreatePEM = true
			secretData = s.Data
		}
	}

	if needToCreatePEM {

		data, err := VerifyTLSSecretForStatefulSet(secretData, opts)
		if err != nil {
			return err
		}

		secretHash := enterprisepem.ReadHashFromSecret(secretReadClient, opts.Namespace, secretName, databaseSecretPath, log)
		return CreatePEMSecretClient(secretWriteClient, kube.ObjectKey(opts.Namespace, secretName), map[string]string{secretHash: data}, opts.OwnerReference, Database)
	}
	var errs error

	if opts.ClusterMode == multi {
		// get the pod names and get the service FQDN for each of the service hostnames
		mdbmName := multicluster.GetRsNamefromMultiStsName(opts.ResourceName)
		clusterNum := multicluster.MustGetClusterNumFromMultiStsName(opts.ResourceName)
		externalDomain := opts.ExternalDomain

		for podNum := 0; podNum < opts.Replicas; podNum++ {
			podName, serviceFQDN := dns.GetMultiPodName(mdbmName, clusterNum, podNum), dns.GetMultiServiceFQDN(mdbmName, opts.Namespace, clusterNum, podNum)
			pem := fmt.Sprintf("%s-pem", podName)
			additionalDomains := []string{serviceFQDN}
			if externalDomain != nil {
				additionalDomains = append(additionalDomains, "*."+*externalDomain)
			}
			if err := validatePemSecret(s, pem, additionalDomains); err != nil {
				errs = multierror.Append(errs, err)
			}
		}
		return errs
	}

	for i, pod := range getPodNames(opts) {
		pem := fmt.Sprintf("%s-pem", pod)
		additionalDomains := GetAdditionalCertDomainsForMember(opts, i)
		if err := validatePemSecret(s, pem, additionalDomains); err != nil {
			errs = multierror.Append(errs, err)
		}
	}
	return errs
}

// getPodNames returns the pod names based on the Cert Options provided.
func getPodNames(opts Options) []string {
	_, podNames := dns.GetDNSNames(opts.ResourceName, opts.ServiceName, opts.Namespace, opts.ClusterDomain, opts.Replicas, nil)
	return podNames
}

func GetDNSNames(opts Options) (hostnames, podNames []string) {
	return dns.GetDNSNames(opts.ResourceName, opts.ServiceName, opts.Namespace, opts.ClusterDomain, opts.Replicas, nil)
}

// GetAdditionalCertDomainsForMember gets any additional domains that the
// certificate for the given member of the stateful set should be signed for.
func GetAdditionalCertDomainsForMember(opts Options, member int) (hostnames []string) {
	_, podNames := GetDNSNames(opts)
	for _, certDomain := range opts.additionalCertificateDomains {
		hostnames = append(hostnames, podNames[member]+"."+certDomain)
	}
	if len(opts.horizons) > 0 {
		//at this point len(ss.ReplicaSetHorizons) should be equal to the number
		//of members in the replica set
		for _, externalHost := range opts.horizons[member] {
			//need to use the URL struct directly instead of url.Parse as
			//Parse expects the URL to have a scheme.
			hostURL := url.URL{Host: externalHost}
			hostnames = append(hostnames, hostURL.Hostname())
		}
	}
	return hostnames
}

func validatePemData(data []byte, additionalDomains []string) error {
	pemFile := enterprisepem.NewFileFromData(data)
	if !pemFile.IsComplete() {
		return xerrors.Errorf("the certificate is not complete\n")
	}
	certs, err := pemFile.ParseCertificate()
	if err != nil {
		return xerrors.Errorf("can't parse certificate: %w\n", err)
	}

	var errs error
	// in case of using an intermediate certificate authority, the certificate
	// data might contain all the certificate chain excluding the root-ca (in case of cert-manager).
	// We need to iterate through the certificates in the chain and find the one at the bottom of the chain
	// containing the additionalDomains which we're validating for.
	for _, cert := range certs {
		var err error
		for _, domain := range additionalDomains {
			if !stringutil.CheckCertificateAddresses(cert.DNSNames, domain) {
				err = xerrors.Errorf("domain %s is not contained in the list of DNSNames %v\n", domain, cert.DNSNames)
				errs = multierror.Append(errs, err)
			}
		}
		if err == nil {
			return nil
		}
	}

	return errs
}

// validatePemSecret returns true if the given Secret contains a parsable certificate and contains all required domains.
func validatePemSecret(secret corev1.Secret, key string, additionalDomains []string) error {
	data, ok := secret.Data[key]
	if !ok {
		return xerrors.Errorf("the secret %s does not contain the expected key %s\n", secret.Name, key)
	}

	return validatePemData(data, additionalDomains)
}

// ValidateCertificates verifies the Secret containing the certificates and the keys is valid.
func ValidateCertificates(secretGetter secret.Getter, name, namespace string) error {
	byteData, err := secret.ReadByteData(secretGetter, kube.ObjectKey(namespace, name))
	if err == nil {
		// Validate that the secret contains the keys, if it contains the certs.
		for _, value := range byteData {
			pemFile := enterprisepem.NewFileFromData(value)
			if !pemFile.IsValid() {
				return xerrors.Errorf("The Secret %s containing certificates is not valid. Entries must contain a certificate and a private key.", name)
			}
		}
	}
	return nil
}

// VerifyAndEnsureClientCertificatesForAgentsAndTLSType ensures that agent certs are present and correct, and returns whether or not they are of the kubernetes.io/tls type.
// If the secret is of type kubernetes.io/tls, it creates a new secret containing the concatenation fo the tls.crt and tls.key fields
func VerifyAndEnsureClientCertificatesForAgentsAndTLSType(secretReadClient, secretWriteClient secrets.SecretClient, secret types.NamespacedName, log *zap.SugaredLogger) error {
	needToCreatePEM := false
	var secretData map[string][]byte
	var s corev1.Secret
	var err error

	if vault.IsVaultSecretBackend() {
		needToCreatePEM = true
		secretData, err = secretReadClient.VaultClient.ReadSecretBytes(fmt.Sprintf("%s/%s/%s", secretReadClient.VaultClient.DatabaseSecretPath(), secret.Namespace, secret.Name))

		if err != nil {
			return err
		}
	} else {
		s, err = secretReadClient.KubeClient.GetSecret(secret)
		if err != nil {
			return err
		}

		if s.Type == corev1.SecretTypeTLS {
			needToCreatePEM = true
			secretData = s.Data
		}
	}
	if needToCreatePEM {
		data, err := VerifyTLSSecretForStatefulSet(secretData, Options{Replicas: 0})
		if err != nil {
			return err
		}
		dataMap := map[string]string{
			util.AutomationAgentPemSecretKey: data,
		}
		return CreatePEMSecretClient(secretWriteClient, secret, dataMap, []metav1.OwnerReference{}, Database)
	}

	return validatePemSecret(s, util.AutomationAgentPemSecretKey, nil)
}

// EnsureSSLCertsForStatefulSet contains logic to ensure that all of the
// required SSL certs for a StatefulSet object exist.
func EnsureSSLCertsForStatefulSet(secretReadClient, secretWriteClient secrets.SecretClient, ms mdbv1.Security, opts Options, log *zap.SugaredLogger) workflow.Status {
	if !ms.IsTLSEnabled() {
		// if there's no SSL certs to generate, return
		return workflow.OK()
	}

	secretName := opts.CertSecretName
	return ValidateSelfManagedSSLCertsForStatefulSet(secretReadClient, secretWriteClient, secretName, opts, log)

}

// EnsureTLSCertsForPrometheus creates a new Secret with a Certificate in
// PEM-format. Returns the hash for the certificate in order to be used in
// AutomationConfig.
//
// For Prometheus we *only accept* certificates of type `corev1.SecretTypeTLS`
// so they always need to be concatenated into PEM-format.
func EnsureTLSCertsForPrometheus(secretClient secrets.SecretClient, namespace string, prom *mdbcv1.Prometheus, podType certDestination, log *zap.SugaredLogger) (string, error) {
	if prom == nil || prom.TLSSecretRef.Name == "" {
		return "", nil
	}

	var secretData map[string][]byte
	var err error

	var secretPath string
	if vault.IsVaultSecretBackend() {
		// TODO: This is calculated twice, can this be done better?
		// This "calculation" is used in ReadHashFromSecret but calculated again in `CreatePEMSecretClient`
		if podType == Database {
			secretPath = secretClient.VaultClient.DatabaseSecretPath()
		} else if podType == AppDB {
			secretPath = secretClient.VaultClient.AppDBSecretPath()
		}

		secretData, err = secretClient.VaultClient.ReadSecretBytes(fmt.Sprintf("%s/%s/%s", secretPath, namespace, prom.TLSSecretRef.Name))
		if err != nil {
			return "", err
		}
	} else {
		s, err := secretClient.KubeClient.GetSecret(kube.ObjectKey(namespace, prom.TLSSecretRef.Name))
		if err != nil {
			return "", xerrors.Errorf("could not read Prometheus TLS certificate: %w", err)
		}

		if s.Type != corev1.SecretTypeTLS {
			return "", xerrors.Errorf("secret containing the Prometheus TLS certificate needs to be of type kubernetes.io/tls")
		}

		secretData = s.Data
	}

	// We only need VerifyTLSSecretForStatefulSet to return the concatenated
	// tls.key and tls.crt as Strings, but to not divert from the existing code,
	// I'm still calling it, but that can be definitely improved.
	//
	// Make VerifyTLSSecretForStatefulSet receive `s.Data` but only return if it
	// has been verified to be valid or not (boolean return).
	//
	// Use another function to concatenate tls.key and tls.crt into a `string`,
	// or make `CreatePEMSecretClient` able to receive a byte[] instead on its
	// `data` parameter.
	data, err := VerifyTLSSecretForStatefulSet(secretData, Options{Replicas: 0})
	if err != nil {
		return "", err
	}

	// ReadHashFromSecret will read the Secret once again from Kubernetes API,
	// we can improve this function by providing the Secret Data contents,
	// instead of `secretClient`.
	secretHash := enterprisepem.ReadHashFromSecret(secretClient, namespace, prom.TLSSecretRef.Name, secretPath, log)
	err = CreatePEMSecretClient(secretClient, kube.ObjectKey(namespace, prom.TLSSecretRef.Name), map[string]string{secretHash: data}, []metav1.OwnerReference{}, podType)
	if err != nil {
		return "", xerrors.Errorf("error creating hashed Secret: %w", err)
	}

	return secretHash, nil
}

// ValidateSelfManagedSSLCertsForStatefulSet ensures that a stateful set using
// user-provided certificates has all of the relevant certificates in place.
func ValidateSelfManagedSSLCertsForStatefulSet(secretReadClient, secretWriteClient secrets.SecretClient, secretName string, opts Options, log *zap.SugaredLogger) workflow.Status {
	// A "Certs" attribute has been provided
	// This means that the customer has provided with a secret name they have
	// already populated with the certs and keys for this deployment.
	// Because of the async nature of Kubernetes, this object might not be ready yet,
	// in which case, we'll keep reconciling until the object is created and is correct.
	err := VerifyAndEnsureCertificatesForStatefulSet(secretReadClient, secretWriteClient, secretName, opts, log)
	if err != nil {
		return workflow.Failed(xerrors.Errorf("The secret object '%s' does not contain all the valid certificates needed: %w", secretName, err))
	}

	secretName = fmt.Sprintf("%s-pem", secretName)

	if err := ValidateCertificates(secretReadClient.KubeClient, secretName, opts.Namespace); err != nil {
		return workflow.Failed(err)
	}

	return workflow.OK()
}
