stepback: true

functions:
  "clone":
    - command: shell.exec
      params:
        script: |
          mkdir -p src/github.com/10gen
    - command: git.get_project
      type: system
      params:
        directory: src/github.com/10gen/ops-manager-kubernetes
  "test_operator":
    - command: shell.exec
      type: system
      params:
        script: |
          src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/build_operator 0
  "build_operator":
    - command: shell.exec
      type: system
      params:
        script: |
          src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/build_operator
    - command: s3.put
      params:
        aws_key: ${mms_build_s3_aws_access_key}
        aws_secret: ${mms_build_s3_aws_secret}
        local_file: src/github.com/10gen/ops-manager-kubernetes/docker/mongodb-enterprise-operator/content/mongodb-enterprise-operator
        remote_file: ops-manager-operator/${revision}/mongodb-enterprise-operator
        bucket: ops-manager-kubernetes-build
        permissions: public-read
        content_type: application/octet-stream
  "setup_aws":
    - command: shell.exec
      params:
        shell: bash
        script: |
            src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/setup_aws
  "setup_docker":
    - command: shell.exec
      params:
          shell: bash
          script: |
            src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/setup_docker

  "gotest_parse_files":
    - command: gotest.parse_files
      params:
        files: ["*.suite", "src/**/*.suite"]

  "build_images":
    - command: shell.exec
      params:
        shell: bash
        script: |
          # Installing requirements
          python3 -m venv venv
          source venv/bin/activate
          python3 -m pip install -r src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/requirements.txt

          src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/build_and_release.py build \
              --image mongodb-enterprise-operator \
              --tag-from-file src/github.com/10gen/ops-manager-kubernetes/release.yaml

          src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/build_and_release.py build \
              --image mongodb-enterprise-database \
              --tag-from-file src/github.com/10gen/ops-manager-kubernetes/release.yaml


  "push_images_production":
    - command: shell.exec
      params:
        script: |
          # Do not execute during normal runs, only during _patch_.
          if [ "${is_patch}" = "true" ]; then
            echo "This is _patch_. Proceeding with release."
          else
            echo "Not releasing during normal run"
            exit 0
          fi

          export QUAY_PROD_USER=${quay_prod_username}
          export QUAY_PROD_PASSWORD=${quay_prod_robot_token}

          # Installing requirements
          python3 -m venv venv
          source venv/bin/activate
          python3 -m pip install -r src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/requirements.txt

          # Build & release Operator Image
          src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/build_and_release.py push \
              --image mongodb-enterprise-operator \
              --tag-from-file src/github.com/10gen/ops-manager-kubernetes/release.yaml \
              --registry production

          # Build & release Database Image
          src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/build_and_release.py push \
              --image mongodb-enterprise-database \
              --tag-from-file src/github.com/10gen/ops-manager-kubernetes/release.yaml \
              --registry production

  "push_images_development":
    - command: shell.exec
      params:
        script: |
          # Do not execute during normal runs, only during _patch_.
          if [ "${is_patch}" = "true" ]; then
            echo "This is _patch_. Proceeding with release."
          else
            echo "Not releasing during normal run"
            exit 0
          fi

          # AWS creds
          export AWS_ACCESS_KEY_ID=${mms_eng_test_aws_access_key}
          export AWS_SECRET_ACCESS_KEY=${mms_eng_test_aws_secret}

          # Installing requirements
          python3 -m venv venv
          source venv/bin/activate
          python3 -m pip install -r src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/requirements.txt

          # Build & release Operator Image
          src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/build_and_release.py push \
              --image mongodb-enterprise-operator \
              --tag-from-file src/github.com/10gen/ops-manager-kubernetes/release.yaml \
              --registry development

          # Build & release Database Image
          src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/build_and_release.py push \
              --image mongodb-enterprise-database \
              --tag-from-file src/github.com/10gen/ops-manager-kubernetes/release.yaml \
              --registry development

tasks:

- name: test
  tags: ["test"]
  commands:
    - func: "clone"
    - func: "test_operator"
    - func: "gotest_parse_files"

- name: release
  tags: ["release"]
  commands:
    - func: "clone"
    - func: "build_operator"
    - func: "setup_docker"
    - func: "setup_aws"
    - func: "build_images"
    - func: "push_images_production"

- name: push_images_to_development
  tags: ["push_images_to_development"]
  commands:
    - func: "clone"
    - func: "build_operator"
    - func: "setup_docker"
    - func: "setup_aws"
    - func: "build_images"
    - func: "push_images_development"


buildvariants:

- name: test
  run_on:
     - archlinux-test
  stepback: true
  tasks:
    - ".test"

- name: release
  run_on:
    - archlinux-test
  tasks:
    - ".release"

- name: push_images_to_development
  run_on:
    - archlinux-test
  batchtime: 1440
  stepback: false
  tasks:
    - ".push_images_to_development"
