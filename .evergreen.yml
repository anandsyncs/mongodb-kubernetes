ignore:
  - "*.md"
  - "public/support/*"
  - "public/samples/*"
stepback: true

# Ops Manager image building & pushing takes a long time
exec_timeout_secs: 3600
variables:
  - &ops_manager_40_first
    ops_manager_version: "4.0.11.50485.20190502T1847Z-1_test"
    ops_manager_namespace: "operator-testing-40-first"
    node_port: 30041
  - &ops_manager_42_current
    ops_manager_version: "4.2.4.56729.20191105T2247Z-1"
    ops_manager_namespace: "operator-testing-42-current"
    node_port: 30043

  - &cloud_manager_qa
    ops_manager_version: "cloud_qa"


    # Openshift v4 Testing Environment
  - &kubernetes_environment_openshift_4
    kube_environment_name: openshift_4
    ecr_registry_needs_auth: ecr-registry
    managed_security_context: "true"
    always_remove_testing_namespace: "true"

    # Kops Vanilla Kubernetes
  - &kubernetes_environment_vanilla
    kube_environment_name: vanilla

  - &kubernetes_environment_kind
    kube_environment_name: kind

  - &go_bin
    "/opt/golang/go1.13/bin"

  - &go_options
    GO111MODULE: "on"
    GOFLAGS: "-mod=vendor"
    GOROOT: "/opt/golang/go1.13"

functions:
  "golint":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - *go_bin
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        env:
          WORKDIR: ${workdir}
          <<: *go_options
        binary: scripts/evergreen/lint_code.sh

  "clone":
    - command: subprocess.exec
      type: setup
      params:
        command: "mkdir -p src/github.com/10gen"
    - command: git.get_project
      type: setup
      params:
        directory: src/github.com/10gen/ops-manager-kubernetes

  "test_operator":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - *go_bin
          - ${workdir}/bin
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        env:
          WORKDIR: ${workdir}
          <<: *go_options

          CONTINUE: "true"
        binary: scripts/evergreen/build_operator.sh

  "build_operator":
    - command: subprocess.exec
      type: setup
      params:
        add_to_path:
        - *go_bin
        - ${workdir}/bin
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        env:
          WORKDIR: ${workdir}
          SKIP_TESTING: "true"

          IMAGE_TYPE: ${image_type}
          <<: *go_options

        binary: scripts/evergreen/build_operator.sh

  "build_database":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        add_to_path:
          - *go_bin
        env:
          <<: *go_options
        command: "make -C docker/mongodb-enterprise-database prepare-build IMAGE_TYPE=${image_type}"

    - command: s3.put
      params:
        aws_key: ${mms_build_s3_aws_access_key}
        aws_secret: ${mms_build_s3_aws_secret}
        local_file: src/github.com/10gen/ops-manager-kubernetes/docker/mongodb-enterprise-operator/content/mongodb-enterprise-operator
        remote_file: ops-manager-operator/${revision}/mongodb-enterprise-operator
        bucket: ops-manager-kubernetes-build
        permissions: public-read
        content_type: application/octet-stream

  # push_versioned_binaries will build the operator and readinessprobe binaries,
  # put them into a tar.gz file and upload them to S3, indicating the release version.
  # this is for customers or any other third party consumers to be able to build
  # their own Docker images.
  push_versioned_binaries:
    - command: subprocess.exec
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        add_to_path:
          - ${workdir}/bin
        env:
          private_gpg_key: ${private_gpg_key}
          private_gpg_passphrase: ${private_gpg_passphrase}
          private_gpg_id: ${private_gpg_id}
        binary: scripts/evergreen/push_versioned_binaries

    - command: s3.put
      params:
        aws_key: ${mms_build_s3_aws_access_key}
        aws_secret: ${mms_build_s3_aws_secret}
        local_files_include_filter:
          - src/github.com/10gen/ops-manager-kubernetes/releases/*
        remote_file: releases/
        bucket: ops-manager-kubernetes-build
        permissions: public-read
        content_type: application/octet-stream

  # upload_e2e_logs has the responsibility of dumping as much information as
  # posible into the S3 bucket that corresponds to this ${version}. The
  # Kubernetes cluster where the test finished running, should still be
  # reachable. Note that after a timeout, Evergreen kills the running process
  # and any running container in the host (which kills Kind).
  upload_e2e_logs:
    # TODO: note that the bucket is public so far - there was something with
    # permissions that didn't allow uploads for the eng test acccount.
    - command: s3.put
      params:
        aws_key: ${mms_eng_test_aws_access_key}
        aws_secret: ${mms_eng_test_aws_secret}
        local_files_include_filter:
          - src/github.com/10gen/ops-manager-kubernetes/logs/*
        remote_file: logs/${task_id}/${execution}/
        bucket: operator-e2e-artifacts
        permissions: public-read
        content_type: text/plain

  # cleanup_exec_environment is a very generic name when the only thing this function
  # does is to clean the logs directory. In the future, more "commands" can be
  # added to it with more clearning features, when needed.
  cleanup_exec_environment:
  - command: subprocess.exec
    type: setup
    params:
      working_dir: src/github.com/10gen/ops-manager-kubernetes
      command: "rm -rf logs/"

  # Install and configures ecr-login-helper, allowing for accessing the ECR registry
  # without calling docker login and in the ECR case, avoiding also calling
  # `aws ecr get login`. This is a binary that should run on every image_type.
  # BIN_PATH is used to define where to save the binary. This is added to the $PATH
  # in subsequent functions that need this program.
  setup_ecr_login_helper:
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        binary: scripts/evergreen/setup_ecr_login_helper

  "setup_jq":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        add_expansions_to_env: true
        binary: scripts/evergreen/setup_jq.sh

  "setup_aws":
    - command: subprocess.exec
      type: setup
      params:
        binary: src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/setup_aws

  "setup_docker":
    - command: subprocess.exec
      type: setup
      params:
        binary: src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/setup_docker

  download_kube_tools:
    - command: subprocess.exec
      type: setup
      params:
        add_expansions_to_env: true
        binary: src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/setup_kubectl

    - command: subprocess.exec
      type: setup
      params:
        add_expansions_to_env: true
        binary: src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/setup_jq.sh

    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        add_expansions_to_env: true
        binary: scripts/evergreen/setup_ecr_login_helper

    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        add_expansions_to_env: true
        add_to_path:
          - ${workdir}/bin
        env:
          AWS_ACCESS_KEY_ID: ${mms_eng_test_aws_access_key}
          AWS_SECRET_ACCESS_KEY: ${mms_eng_test_aws_secret}
          AWS_DEFAULT_REGION: ${mms_eng_test_aws_region}
        binary: scripts/evergreen/setup_kind

  teardown_kubernetes_environment:
  - command: subprocess.exec
    type: setup
    params:
      working_dir: src/github.com/10gen/ops-manager-kubernetes
      add_to_path:
      - ${workdir}/bin
      include_expansions_in_env:
      - workdir
      - kube_environment_name
      binary: scripts/evergreen/teardown_kubernetes_environment

  # Makes sure a kubectl context is defined.
  setup_kubernetes_environment:
  - command: subprocess.exec
    type: setup
    params:
      working_dir: src/github.com/10gen/ops-manager-kubernetes
      add_expansions_to_env: true
      add_to_path:
        - ${workdir}/bin
      env:
        BINDIR: ${workdir}/bin
      binary: scripts/evergreen/setup_kubernetes_environment

  setup_cert_manager:
  - command: subprocess.exec
    type: setup
    params:
      working_dir: src/github.com/10gen/ops-manager-kubernetes
      add_expansions_to_env: true
      add_to_path:
        - ${workdir}/bin
      env:
        BINDIR: ${workdir}/bin
        KUBECONFIG: ${workdir}/${kube_environment_name}_config
      binary: scripts/evergreen/setup_cert_manager

  "gotest_parse_files":
    - command: gotest.parse_files
      type: test
      params:
        files: ["*.suite", "src/**/*.suite"]

  # Uploads the Docker build context to S3 in order for Kaniko to be able to build the images.
  upload_e2e_build_context:
  - command: subprocess.exec
    params:
      working_dir: src/github.com/10gen/ops-manager-kubernetes
      add_expansions_to_env: true
      binary: scripts/evergreen/upload_e2e_build_context.sh
  - command: s3.put
    params:
      aws_key: ${mms_build_s3_aws_access_key}
      aws_secret: ${mms_build_s3_aws_secret}
      local_files_include_filter:
        - src/github.com/10gen/ops-manager-kubernetes/*-context.tar.gz
      remote_file: ops-manager-operator/${version_id}:${image_type}/contexts/
      bucket: ops-manager-kubernetes-build
      permissions: public-read
      content_type: application/octet-stream

  kaniko_build:
  - command: subprocess.exec
    type: setup
    params:
      env:
        AWS_ACCESS_KEY_ID: ${mms_eng_test_aws_access_key}
        AWS_SECRET_ACCESS_KEY: ${mms_eng_test_aws_secret}
        AWS_REGION: ${mms_eng_test_aws_region}
        KUBECONFIG: ${workdir}/${kube_environment_name}_config
      working_dir: src/github.com/10gen/ops-manager-kubernetes
      add_expansions_to_env: true
      add_to_path:
      - ${workdir}/bin
      binary: scripts/evergreen/build_docker_image.sh

  kaniko_wait:
  - command: subprocess.exec
    type: setup
    params:
      working_dir: src/github.com/10gen/ops-manager-kubernetes
      add_expansions_to_env: true
      add_to_path:
      - ${workdir}/bin
      env:
        KUBECONFIG: ${workdir}/${kube_environment_name}_config
      binary: scripts/evergreen/wait_docker_image.sh

  # todo: change after init appdb is done
  "build_and_push_om_test_images":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        add_to_path:
          - *go_bin
          - ${workdir}/bin
        add_expansions_to_env: true
        env:
          <<: *go_options

          AWS_ACCESS_KEY_ID: ${mms_eng_test_aws_access_key}
          AWS_SECRET_ACCESS_KEY: ${mms_eng_test_aws_secret}
          AWS_DEFAULT_REGION: ${mms_eng_test_aws_region}
          KUBECONFIG: ${workdir}/${kube_environment_name}_config

          IN_MEMORY_CONTEXT: "true"
          REPO_URL: ${ecr_registry}/dev
          INIT_OPS_MANAGER_REGISTRY: ${ecr_registry}/dev
          GITHUB_TOKEN: ${GITHUB_TOKEN}

          CLUSTER_TYPE: ${cluster_type}
          kaniko: "true"

        # temporary keeping om_version until we move to init appdb
        command: scripts/dev/batch_init_om_appdb_images

  setup_cloud_qa:
  - command: subprocess.exec
    type: setup
    params:
      working_dir: src/github.com/10gen/ops-manager-kubernetes
      env:
        NAMESPACE_FILE: ${workdir}/.namespace
        ENV_FILE: ${workdir}/.ops-manager-env
      include_expansions_in_env:
      - e2e_cloud_qa_baseurl
      - e2e_cloud_qa_orgid_owner
      - e2e_cloud_qa_apikey_owner
      - e2e_cloud_qa_user_owner
      - ops_manager_version
      - task_name

      command: "scripts/evergreen/e2e/setup_cloud_qa.py create"

  teardown_cloud_qa:
  - command: subprocess.exec
    type: setup
    params:
      working_dir: src/github.com/10gen/ops-manager-kubernetes
      include_expansions_in_env:
      - e2e_cloud_qa_baseurl
      - e2e_cloud_qa_orgid_owner
      - e2e_cloud_qa_apikey_owner
      - e2e_cloud_qa_user_owner
      - ops_manager_version
      env:
        NAMESPACE_FILE: ${workdir}/.namespace
        ENV_FILE: ${workdir}/.ops-manager-env

      command: "scripts/evergreen/e2e/setup_cloud_qa.py delete"

  # Exit if repository is not clean.
  guard_git_repo_is_clean:
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        binary: scripts/evergreen/guard_git_repo_is_clean

  # This is a blocker for the release process. It will *always* fail and needs to be overriden
  # if the release needs to proceed.
  release_blocker:
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        binary: scripts/evergreen/release_blocker

  # Tags and pushes an image into an external Docker registry. The source image
  # needs to exist before it can be pushed to a remote registry.
  # It is expected that IMAGE_SOURCE is accessible with no authentication (like a
  # local image), and the IMAGE_TARGET will be authenticated with DOCKER_* series of
  # environemnt variables.
  release_docker_image_to_registry:
    - command: subprocess.exec
      type: system
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        add_to_path:
          - ${workdir}/bin
        env:
          DOCKER_REGISTRY: ${docker_registry}
          DOCKER_LOGIN_USER: ${docker_username}
          DOCKER_LOGIN_PASSWORD: ${docker_password}
          AWS_ACCESS_KEY_ID: ${mms_eng_test_aws_access_key}
          AWS_SECRET_ACCESS_KEY: ${mms_eng_test_aws_secret}

          VERSIONS: ${versions}
          TAG_SOURCE: ${tag_source}
          TAG_DEST: ${tag_dest}
          IMAGE_SOURCE: ${image_source}
          IMAGE_TARGET: ${image_target}

        binary: scripts/evergreen/tag_push_docker_image.sh

  #
  # e2e_test is the main function used to run the e2e tests. It expects Ops
  # Manager to be running (local to the Kubernetes cluster or Cloud Manager) and
  # its configuration to exist in a ${workdir}/.ops-manager-env file.
  #
  # The e2e script will run all the tasks that are needed by the e2e tests like
  # fetching the OM API credentials to use and create the Secret and ConfigMap
  # objects that are required.
  #
  # At this point, the Kubernetes environment should be configured already
  # (kubectl configuration points to the Kubernetes cluster where we run the tests).
  #
  # Please note: There are many ENV variables passed to the `e2e` script, so try
  # to not add more. If this is required, discuss your use case with the team first.
  #
  e2e_test:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        add_to_path:
          - ${workdir}/bin
        include_expansions_in_env:
          - always_remove_testing_namespace
          - ecr_registry
          - ecr_registry_needs_auth
          - kube_environment_name
          - version_id
        env:
          REGISTRY: ${ecr_registry}/dev/${image_type}
          OPS_MANAGER_REGISTRY: ${ecr_registry}/images/${image_type}
          INIT_OPS_MANAGER_REGISTRY: ${ecr_registry}/dev
          MANAGED_SECURITY_CONTEXT: ${managed_security_context}
          TASK_ID: ${task_id}
          TASK_NAME: ${task_name}
          OPS_MANAGER_NAMESPACE: ${ops_manager_namespace}
          OPS_MANAGER_ENV: ${workdir}/.ops-manager-env
          NAMESPACE_FILE: ${workdir}/.namespace
          NODE_PORT: ${node_port}
          AWS_ACCESS_KEY_ID: ${mms_eng_test_aws_access_key}
          AWS_SECRET_ACCESS_KEY: ${mms_eng_test_aws_secret}
          OPERATOR_VERSION_UPGRADE_FROM: ${from_version}
          MMS_VERSION: ${ops_manager_version}
          WATCH_NAMESPACE: ${watch_namespace}
          STATIC_NAMESPACE: ${static_namespace}
          TEST_MODE: ${test_mode}
          KUBECONFIG: ${workdir}/${kube_environment_name}_config

        binary: scripts/evergreen/e2e/e2e

  #
  # Performs some K8s cluster fixing things and also deploys a cluster cleaner.
  # Optionally (if $ops_manager_namespace is specified) deploys the test OM
  #
  prepare_test_env:
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        add_to_path:
          - ${workdir}/bin
        env:
          AWS_ACCESS_KEY_ID: ${mms_eng_test_aws_access_key}
          AWS_SECRET_ACCESS_KEY: ${mms_eng_test_aws_secret}
          AWS_DEFAULT_REGION: ${mms_eng_test_aws_region}
          KUBECONFIG: ${workdir}/${kube_environment_name}_config

        command: "scripts/evergreen/prepare_test_env ${ops_manager_namespace} ${ops_manager_version} ${node_port}"
  #
  # Performs some AWS cleanup
  #
  prepare_aws:
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        add_to_path:
          - ${workdir}/bin
        env:
          AWS_ACCESS_KEY_ID: ${mms_eng_test_aws_access_key}
          AWS_SECRET_ACCESS_KEY: ${mms_eng_test_aws_secret}
          AWS_DEFAULT_REGION: ${mms_eng_test_aws_region}

        command: "scripts/evergreen/prepare_aws"

  build_and_push_opsmanager_image_generic:
    - command: subprocess.exec
      params:
        env:
          AWS_ACCESS_KEY_ID: ${mms_eng_test_aws_access_key}
          AWS_DEFAULT_REGION: ${mms_eng_test_aws_region}
          AWS_SECRET_ACCESS_KEY: ${mms_eng_test_aws_secret}
          IN_MEMORY_CONTEXT: "true"
          KUBECONFIG: ${workdir}/${kube_environment_name}_config
          REPO_URL: ${ecr_registry}/images
        include_expansions_in_env:
        - CLUSTER_TYPE
        - VERSIONS
        - ecr_registry
        - version_id
        add_to_path:
          - ${workdir}/bin
        command: "docker/mongodb-enterprise-ops-manager/batch_om_images"
        working_dir: src/github.com/10gen/ops-manager-kubernetes

tasks:
- name: unit_tests
  tags: ["unit_tests"]
  commands:
    - func: "setup_jq"
    - func: "test_operator"
    - func: "gotest_parse_files"

- name: unit_tests_lint
  tags: ["unit_tests"]
  commands:
    - func: "golint"

- name: release_blocker
  commands:
  - func: clone
  - func: release_blocker

# release_ops_manager_rhel Releases the just build Docker image
# with a release image tag.
# The registry location (variable with name `image_target`) is obtained from RedHat Connect.
#- name: release_ops_manager_rh_connect
#  exec_timeout_secs: 7200 # can take quite long
#  commands:
#    - func: clone
#    - func: guard_git_repo_is_clean
#    - func: setup_jq
#    - func: setup_ecr_login_helper
#
#    - func: release_docker_image_to_registry
#      vars:
#        versions: '$(jq --raw-output ".opsManagerImages[] | .version" < release.json)'
#        tag_source: '$(join "-" $version $(echo "operator$(git describe --dirty)"))'
#        tag_dest: '$(join "-" $version $(echo "operator$(git describe --dirty)"))'
#        image_source: ${ecr_registry}/dev/rhel/mongodb-enterprise-ops-manager
#        image_target: scan.connect.redhat.com/ospid-b419ca35-17b4-4655-adee-a34e704a6835/mongodb-enterprise-ops-manager
#        docker_password: ${rhc_om_pid}
#
#    - func: release_docker_image_to_registry
#      vars:
#        versions: '$(jq --raw-output ".opsManagerImages[] | .version" < release.json)'
#        tag_source: '$(join "-" $version $(echo "operator$(git describe --dirty)"))'
#        tag_dest: '$(join "-" $version $(echo "operator$(git describe --dirty)"))'
#        image_source: ${ecr_registry}/dev/rhel/mongodb-enterprise-appdb
#        image_target: scan.connect.redhat.com/ospid-31c2f102-af15-4e15-87b9-30710586d9ad/mongodb-enterprise-appdb
#        docker_password: ${rhc_appdb_pid}

# release_operator_rh_connect Releases the Operator and Database image to RH Connect.
- name: release_operator_rh_connect
  commands:
    - func: clone
    - func: guard_git_repo_is_clean
    - func: setup_jq
    - func: setup_ecr_login_helper

    - func: release_docker_image_to_registry
      vars:
        versions: ${version_id}
        tag_source: '$(echo $version)'
        tag_dest: '$(git describe --dirty)'
        image_source: ${ecr_registry}/dev/rhel/mongodb-enterprise-operator
        image_target: scan.connect.redhat.com/ospid-5558a531-617e-46d7-9320-e84d3458768a/mongodb-enterprise-operator
        docker_password: ${rhc_operator_pid}

    - func: release_docker_image_to_registry
      vars:
        versions: ${version_id}
        tag_source: '$(echo $version)'
        tag_dest: '$(git describe --dirty)'
        image_source: ${ecr_registry}/dev/rhel/mongodb-enterprise-database
        image_target: scan.connect.redhat.com/ospid-239de277-d8bb-44b4-8593-73753752317f/mongodb-enterprise-database
        docker_password: ${rhc_database_pid}

- name: release_ops_manager_quay
  commands:
    - func: clone
    - func: guard_git_repo_is_clean
    - func: setup_jq
    - func: setup_ecr_login_helper

    # pushing init ops manager image at the same time as operator release for now
    - func: release_docker_image_to_registry
      vars:
        # FIXME: check why we would need this?
        versions: '$(jq --raw-output ".initOpsManagerVersion" < release.json)'
        tag_source: "$version"
        tag_dest: "$version"
        image_source: ${ecr_registry}/dev/mongodb-enterprise-init-ops-manager
        image_target: quay.io/mongodb/mongodb-enterprise-init-ops-manager
        docker_username: ${quay_prod_username}
        docker_password: ${quay_prod_robot_token}

    # TODO: adjust after appdb init container is implemented
    - func: release_docker_image_to_registry
      vars:
        versions: '$(jq --raw-output ".opsManagerImages[] | .version" < release.json)'
        tag_source: '$(join "-" $version $(echo "operator$(git describe --dirty)"))'
        tag_dest: '$(join "-" $version $(echo "operator$(git describe --dirty)"))'
        image_source: ${ecr_registry}/dev/${distro}/mongodb-enterprise-appdb
        image_target: quay.io/mongodb/mongodb-enterprise-appdb${suffix}
        docker_username: ${quay_prod_username}
        docker_password: ${quay_prod_robot_token}

- name: release_operator_quay
  commands:
    - func: clone
    - func: guard_git_repo_is_clean
    - func: setup_jq
    - func: setup_ecr_login_helper

    - func: release_docker_image_to_registry
      vars:
        versions: ${version_id}
        tag_source: '$(echo $version)'
        tag_dest: '$(git describe --dirty)'
        image_source: ${ecr_registry}/dev/${distro}/mongodb-enterprise-operator
        image_target: quay.io/mongodb/mongodb-enterprise-operator${suffix}
        docker_username: ${quay_prod_username}
        docker_password: ${quay_prod_robot_token}

    - func: release_docker_image_to_registry
      vars:
        versions: ${version_id}
        tag_source: '$(echo $version)'
        tag_dest: '$(git describe --dirty)'
        image_source: ${ecr_registry}/dev/${distro}/mongodb-enterprise-database
        image_target: quay.io/mongodb/mongodb-enterprise-database${suffix}
        docker_username: ${quay_prod_username}
        docker_password: ${quay_prod_robot_token}

- name: prerelease_master_images
  commands:
    - func: clone
    - func: setup_jq
    - func: setup_ecr_login_helper

    - func: release_docker_image_to_registry
      vars:
        versions: ${version_id}
        tag_source: '$(echo $version)'
        tag_dest: '$(git describe --dirty)'
        image_source: ${ecr_registry}/dev/ubuntu/mongodb-enterprise-operator
        image_target: quay.io/mongodb/mongodb-enterprise-operator-prerelease
        docker_username: ${quay_prod_username}
        docker_password: ${quay_prod_robot_token}

    - func: release_docker_image_to_registry
      vars:
        versions: ${version_id}
        tag_source: '$(echo $version)'
        tag_dest: '$(git describe --dirty)'
        image_source: ${ecr_registry}/dev/ubuntu/mongodb-enterprise-database
        image_target: quay.io/mongodb/mongodb-enterprise-database-prerelease
        docker_username: ${quay_prod_username}
        docker_password: ${quay_prod_robot_token}

    - func: release_docker_image_to_registry
      vars:
        versions: '$(jq --raw-output ".opsManagerImages[] | .version" < release.json)'
        tag_source: '$(join "-" $version $(echo "operator$(git describe --dirty)"))'
        tag_dest: '$(join "-" $version $(echo "operator$(git describe --dirty)"))'
        image_source: ${ecr_registry}/dev/ubuntu/mongodb-enterprise-ops-manager
        image_target: quay.io/mongodb/mongodb-enterprise-ops-manager-prerelease
        docker_username: ${quay_prod_username}
        docker_password: ${quay_prod_robot_token}

    - func: release_docker_image_to_registry
      vars:
        versions: '$(jq --raw-output ".opsManagerImages[] | .version" < release.json)'
        tag_source: '$(join "-" $version $(echo "operator$(git describe --dirty)"))'
        tag_dest: '$(join "-" $version $(echo "operator$(git describe --dirty)"))'
        image_source: ${ecr_registry}/dev/ubuntu/mongodb-enterprise-appdb
        image_target: quay.io/mongodb/mongodb-enterprise-appdb-prerelease
        docker_username: ${quay_prod_username}
        docker_password: ${quay_prod_robot_token}

- name: build_test_image
  exec_timeout_secs: 600
  priority: 60
  commands:
  - func: clone
  - func: setup_docker
  - func: download_kube_tools
    vars:
      <<: *kubernetes_environment_kind
  - func: setup_aws
  - func: setup_kubernetes_environment
    vars:
      <<: *kubernetes_environment_kind
  - func: upload_e2e_build_context
    vars:
      image_type: scratch
      context: tests
  - func: kaniko_build
    vars:
      destination: ${ecr_registry}/dev/mongodb-enterprise-tests:${version_id}
      context: s3://ops-manager-kubernetes-build/ops-manager-operator/${version_id}:scratch/contexts/tests-context.tar.gz
      cache_repo: ${ecr_registry}/cache/mongodb-enterprise-tests
      label: tests-${version_id}
  # kaniko_wait will block until all the Pods with 'labels' are in Succeeded state.
  - func: kaniko_wait
    vars:
      labels: 'tests-${version_id}'

- name: build_images_rhel
  exec_timeout_secs: 600
  priority: 60
  commands:
  - func: clone
  - func: setup_docker
  - func: download_kube_tools
    vars:
      <<: *kubernetes_environment_kind
  - func: build_operator
    vars:
      image_type: rhel
  - func: build_database
    vars:
      image_type: rhel
  - func: upload_e2e_build_context
    vars:
      image_type: rhel
      context: operator
  - func: setup_kubernetes_environment
    vars:
      <<: *kubernetes_environment_kind
  - func: kaniko_build
    vars:
      destination: ${ecr_registry}/dev/rhel/mongodb-enterprise-operator:${version_id}
      context: s3://ops-manager-kubernetes-build/ops-manager-operator/${version_id}:rhel/contexts/operator-context.tar.gz
      cache_repo: ${ecr_registry}/cache/mongodb-enterprise-operator
      label: rhel-operator-${version_id}
  - func: kaniko_build
    vars:
      destination: ${ecr_registry}/dev/rhel/mongodb-enterprise-database:${version_id}
      context: s3://ops-manager-kubernetes-build/ops-manager-operator/${version_id}:rhel/contexts/database-context.tar.gz
      cache_repo: ${ecr_registry}/cache/mongodb-enterprise-database
      label: rhel-database-${version_id}
  - func: kaniko_wait
    vars:
      labels: 'rhel-operator-${version_id}, rhel-database-${version_id}'

- name: build_images_ubuntu
  priority: 60
  exec_timeout_secs: 600
  commands:
  - func: clone
  - func: setup_docker
  - func: download_kube_tools
    vars:
      <<: *kubernetes_environment_kind
  - func: build_operator
    vars:
      image_type: ubuntu
  - func: build_database
    vars:
      image_type: ubuntu
  - func: upload_e2e_build_context
    vars:
      image_type: ubuntu
      context: operator
  - func: setup_kubernetes_environment
    vars:
      <<: *kubernetes_environment_kind
  - func: kaniko_build
    vars:
      destination: ${ecr_registry}/dev/ubuntu/mongodb-enterprise-operator:${version_id}
      context: s3://ops-manager-kubernetes-build/ops-manager-operator/${version_id}:ubuntu/contexts/operator-context.tar.gz
      cache_repo: ${ecr_registry}/cache/mongodb-enterprise-operator
      label: ubuntu-operator-${version_id}
  - func: kaniko_build
    vars:
      destination: ${ecr_registry}/dev/ubuntu/mongodb-enterprise-database:${version_id}
      context: s3://ops-manager-kubernetes-build/ops-manager-operator/${version_id}:ubuntu/contexts/database-context.tar.gz
      cache_repo: ${ecr_registry}/cache/mongodb-enterprise-database
      label: ubuntu-database-${version_id}
  - func: kaniko_wait
    vars:
      labels: 'ubuntu-operator-${version_id}, ubuntu-database-${version_id}'

- name: build_om_images_rhel
  priority: 60
  commands:
  - func: clone
  - func: setup_aws
  - func: setup_docker
  - func: download_kube_tools
    vars:
      <<: *kubernetes_environment_vanilla
  - func: setup_kubernetes_environment
    vars:
      <<: *kubernetes_environment_vanilla
  - func: build_operator
    vars:
      image_type: rhel
  - func: build_and_push_om_test_images
    vars:
      cluster_type: "openshift"

- name: build_om_images_ubuntu
  commands:
  - func: clone
  - func: setup_aws
  - func: setup_docker
  - func: download_kube_tools
    vars:
      <<: *kubernetes_environment_vanilla
  - func: setup_kubernetes_environment
    vars:
      <<: *kubernetes_environment_vanilla
  - func: build_operator
    vars:
      image_type: ubuntu
  - func: build_and_push_om_test_images
    vars:
      cluster_type: "kops"

- name: prepare_cluster_vanilla
  exec_timeout_secs: 1200
  priority: 59
  commands:
    - func: clone
    - func: setup_aws
    - func: download_kube_tools
    - func: setup_kubernetes_environment
      vars:
        <<: *kubernetes_environment_vanilla
    - func: prepare_test_env
      vars:
        <<: *ops_manager_40_first

    - func: prepare_test_env
      vars:
        <<: *ops_manager_42_current

- name: prepare_cluster_vanilla_om
  exec_timeout_secs: 600
  priority: 59
  commands:
    - func: clone
    - func: download_kube_tools
    - func: setup_aws
    - func: setup_kubernetes_environment
      vars:
        <<: *kubernetes_environment_vanilla
        cluster_name: e2e.om.mongokubernetes.com
    - func: prepare_test_env

- name: prepare_aws
  exec_timeout_secs: 600
  priority: 59
  commands:
    - func: clone
    - func: setup_jq
    - func: setup_aws
    - func: prepare_aws

- name: e2e_op_upgrade_one_deployment
  tags: ["patch-run"]
  exec_timeout_secs: 2400
  commands:
    - func: e2e_test
      vars:
        from_version: 1.2.2

- name: e2e_op_upgrade_replica_set
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: e2e_test
      vars:
        from_version: latest

- name: e2e_multiple_cluster_failures
  tags: ["patch-run"]
  commands:
    - func: e2e_test

- name: e2e_standalone_custom_podspec
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_standalone_schema_validation
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_schema_validation
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_sharded_cluster_schema_validation
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_users_schema_validation
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_crd_validation
  tags: ["patch-run"]
  commands:
    - func: "e2e_test"

- name: e2e_standalone_config_map
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_standalone_groups
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_standalone_recovery
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_standalone_recovery_k8s
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_mongodb_validation_webhook
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_recovery
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_long_name
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_sharded_cluster_long_name
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_config_map
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_ent
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_groups
  tags: ["patch-run"]
  exec_timeout_secs: 600
  commands:
     - func: "e2e_test"

- name: e2e_replica_set_pv
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_pv_multiple
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_8_members
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_exposed_externally
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_readiness_probe
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_update_delete_parallel
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_tls_sc_additional_certs
  tags: ["patch-run"]
  exec_timeout_secs: 720
  commands:
    - func: "e2e_test"

- name: e2e_tls_sc_additional_certs_transition
  tags: ["patch-run"]
  exec_timeout_secs: 720
  commands:
    - func: "e2e_test"

- name: e2e_tls_rs_additional_certs
  tags: ["patch-run"]
  exec_timeout_secs: 720
  commands:
    - func: "e2e_test"

- name: e2e_tls_rs_external_access
  tags: ["patch-run"]
  exec_timeout_secs: 900
  commands:
    - func: "e2e_test"

- name: e2e_tls_rs_external_access_tls_transition
  tags: ["patch-run"]
  exec_timeout_secs: 720
  commands:
    - func: "e2e_test"

- name: e2e_sharded_cluster
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_sharded_cluster_pv
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_sharded_cluster_recovery
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_sharded_cluster_secret
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_sharded_cluster_scale_shards
  tags: ["patch-run"]
  exec_timeout_secs: 720
  commands:
    - func: "e2e_test"

- name: e2e_standalone_type_change_recovery
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_all_mongodb_resources_parallel
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_standalone_upgrade_downgrade
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_upgrade_downgrade
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_custom_podspec
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_sharded_cluster_custom_podspec
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_sharded_cluster_upgrade_downgrade
  tags: ["patch-run"]
  exec_timeout_secs: 1800
  commands:
    - func: "e2e_test"

- name: e2e_standalone_no_tls_no_status_is_set
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
  - func: "e2e_test"

- name: e2e_replica_set_tls_allow
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
  - func: "e2e_test"

- name: e2e_replica_set_tls_prefer
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
  - func: "e2e_test"

- name: e2e_replica_set_tls_require
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
  - func: "e2e_test"

- name: e2e_replica_set_tls_require_custom_ca
  exec_timeout_secs: 1200
  commands:
  - func: "e2e_test"

- name: e2e_sharded_cluster_tls_require_custom_ca
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
  - func: "e2e_test"

- name: e2e_tls_x509_sc_custom_ca
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
  - func: "e2e_test"

- name: e2e_replica_set_tls_require_and_disable
  exec_timeout_secs: 1800
  commands:
  - func: "e2e_test"

- name: e2e_tls_multiple_different_ssl_configs
  exec_timeout_secs: 1200
  commands:
  - func: "e2e_test"

- name: e2e_replica_set_tls_require_upgrade
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
  - func: "e2e_test"

- name: e2e_sharded_cluster_tls_require
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
  - func: "e2e_test"

- name: e2e_tls_x509_rs
  tags: ["patch-run"]
  # longer timeout than usual as this test tests recovery from bad states which can take some time
  exec_timeout_secs: 1800
  commands:
  - func: "e2e_test"

- name: e2e_tls_x509_sc
  tags: ["openshift-om-42"]
  exec_timeout_secs: 1800
  commands:
    - func: "e2e_test"

- name: e2e_tls_x509_users_addition_removal
  tags: ["patch-run"]
  exec_timeout_secs: 1800
  commands:
    - func: "e2e_test"

- name: e2e_tls_x509_user_connectivity
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_tls_x509_configure_all_options_rs
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_tls_x509_configure_all_options_sc
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_scram_sha_256_user_connectivity
  tags: ["patch-run"]
  exec_timeout_secs: 1800
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_scram_sha_1_user_connectivity
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_sharded_cluster_scram_sha_256_user_connectivity
  tags: ["patch-run"]
  exec_timeout_secs: 1800
  commands:
    - func: "e2e_test"

- name: e2e_sharded_cluster_scram_sha_1_user_connectivity
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_scram_sha_1_upgrade
  tags: ["patch-run"]
  exec_timeout_secs: 1800
  commands:
    - func: "e2e_test"

- name: e2e_sharded_cluster_scram_sha_1_upgrade
  tags: ["patch-run"]
  exec_timeout_secs: 1800
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_x509_to_scram_transition
  tags: ["patch-run"]
  exec_timeout_secs: 1800
  commands:
    - func: "e2e_test"

- name: e2e_sharded_cluster_x509_to_scram_transition
  tags: ["patch-run"]
  exec_timeout_secs: 2400
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_scram_sha_and_x509
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_sharded_cluster_scram_sha_and_x509
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_replica_set_scram_x509_internal_cluster
  exec_timeout_secs: 1200
  tags: ["patch-run"]
  commands:
    - func: "e2e_test"

- name: e2e_sharded_cluster_scram_x509_internal_cluster
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_configure_tls_and_x509_simultaneously_rs
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_configure_tls_and_x509_simultaneously_sc
  exec_timeout_secs: 1800
  commands:
    - func: "e2e_test"

- name: e2e_configure_tls_and_x509_simultaneously_st
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

# E2E tests for Ops Manager (sorted alphabetically):

- name: e2e_om_appdb_scale_up_down
  tags: ["patch-run"]
  exec_timeout_secs: 2400
  commands:
    - func: "e2e_test"

- name: e2e_om_appdb_scram
  tags: ["patch-run"]
  exec_timeout_secs: 2800
  commands:
    - func: "e2e_test"

- name: e2e_om_appdb_upgrade
  tags: ["patch-run"]
  exec_timeout_secs: 2400
  commands:
  - func: "e2e_test"

- name: e2e_om_appdb_validation
  tags: ["patch-run"]
  exec_timeout_secs: 600
  commands:
    - func: "e2e_test"

- name: e2e_om_external_connectivity
  tags: ["patch-run"]
  exec_timeout_secs: 2400
  commands:
    - func: "e2e_test"

- name: e2e_om_ops_manager_backup
  tags: ["patch-run"]
  exec_timeout_secs: 2400
  commands:
    - func: "e2e_test"

- name: e2e_om_ops_manager_backup_light
  tags: ["patch-run"]
  exec_timeout_secs: 1800
  commands:
    - func: e2e_test

- name: e2e_om_ops_manager_backup_tls
  tags: ["patch-run"]
  exec_timeout_secs: 1800
  commands:
    - func: e2e_test

- name: e2e_om_ops_manager_scale
  tags: ["patch-run"]
  exec_timeout_secs: 2800
  commands:
    - func: "e2e_test"

- name: e2e_om_ops_manager_upgrade
  tags: ["patch-run"]
  exec_timeout_secs: 2400
  commands:
    - func: "e2e_test"

- name: e2e_om_ops_manager_pod_spec
  tags: ["patch-run"]
  exec_timeout_secs: 2800
  commands:
    - func: e2e_test

- name: e2e_op_upgrade_om
  tags: ["patch-run"]
  exec_timeout_secs: 2800
  commands:
    - func: e2e_test
      vars:
        from_version: latest

- name: e2e_om_validation_webhook
  tags: ["patch-run"]
  exec_timeout_secs: 1200
  commands:
    - func: "e2e_test"

- name: e2e_om_ops_manager_https_enabled
  tags: ["patch-run"]
  commands:
    - func: e2e_test

- name: e2e_om_jvm_params
  tags: ["patch-run"]
  exec_timeout_secs: 2800
  commands:
    - func: e2e_test

- name: build_and_push_ops_manager_ubuntu
  patch_only: true
  commands:
    - func: clone
    - func: setup_jq
    - func: setup_aws
    - func: download_kube_tools
    - func: setup_kubernetes_environment
      vars:
        <<: *kubernetes_environment_vanilla
    - func: setup_ecr_login_helper
    - func: build_and_push_opsmanager_image_generic
      vars:
        CLUSTER_TYPE: "kops"

- name: build_and_push_ops_manager_ubi
  patch_only: true
  commands:
    - func: clone
    - func: setup_jq
    - func: setup_aws
    - func: download_kube_tools
    - func: setup_kubernetes_environment
      vars:
        <<: *kubernetes_environment_vanilla
    - func: setup_ecr_login_helper
    - func: build_and_push_opsmanager_image_generic
      vars:
        CLUSTER_TYPE: "openshift"


task_groups:
- name: unit_task_group
  setup_group:
    - func: "clone"
  tasks:
    - unit_tests
    - unit_tests_lint

# This is the task group for Kubernetes-related e2e tests which focus on testing Kubernetes features instead of Automation Config
- name: e2e_kube_only_task_group
  max_hosts: 4
  setup_group:
    - func: clone
    - func: download_kube_tools
  setup_task:
    - func: cleanup_exec_environment
    - func: setup_kubernetes_environment
    - func: setup_cloud_qa
  tasks:
    - e2e_crd_validation
    - e2e_sharded_cluster_long_name
    - e2e_replica_set_long_name
    - e2e_replica_set_config_map
    - e2e_replica_set_exposed_externally
    - e2e_replica_set_pv
    - e2e_replica_set_pv_multiple
    - e2e_replica_set_schema_validation
    - e2e_sharded_cluster_pv
    - e2e_sharded_cluster_recovery
    - e2e_sharded_cluster_schema_validation
    - e2e_standalone_config_map
    - e2e_standalone_recovery
    - e2e_standalone_recovery_k8s
    - e2e_standalone_schema_validation
    - e2e_users_schema_validation
  teardown_task:
    - func: upload_e2e_logs
    - func: teardown_kubernetes_environment
    - func: teardown_cloud_qa

- name: e2e_webhook_validation_task_group
  max_hosts: 4
  setup_group:
    - func: clone
    - func: download_kube_tools
  setup_task:
    - func: setup_kubernetes_environment
    - func: setup_cloud_qa
  tasks:
    - e2e_mongodb_validation_webhook
  teardown_task:
    - func: upload_e2e_logs
    - func: teardown_kubernetes_environment
    - func: teardown_cloud_qa


  # This is the general task group which is supposed to be tested on ALL OM versions. Please don't add tests here which
  # don't test anything special in automation config and more focused on Kubernetes features - such tests should go to
  # 'e2e_kube_only_task_group' task group
- name: e2e_core_task_group
  max_hosts: 4
  setup_group:
    - func: clone
    - func: download_kube_tools
  setup_task:
    - func: cleanup_exec_environment
    - func: setup_kubernetes_environment
    - func: setup_cloud_qa
  tasks:
    - e2e_all_mongodb_resources_parallel
    - e2e_multiple_cluster_failures
    - e2e_replica_set
    - e2e_replica_set_8_members
    - e2e_replica_set_ent
    - e2e_replica_set_groups
    - e2e_replica_set_recovery
    - e2e_replica_set_upgrade_downgrade
    - e2e_replica_set_custom_podspec
    - e2e_sharded_cluster
    - e2e_sharded_cluster_secret
    - e2e_sharded_cluster_upgrade_downgrade
    - e2e_sharded_cluster_custom_podspec
    - e2e_standalone_groups
    - e2e_standalone_type_change_recovery
    - e2e_standalone_upgrade_downgrade
    - e2e_standalone_custom_podspec
  teardown_task:
    - func: upload_e2e_logs
    - func: teardown_kubernetes_environment
    - func: teardown_cloud_qa

- name: e2e_tls_task_group
  max_hosts: 3
  setup_group:
    - func: clone
    - func: download_kube_tools
  setup_task:
    - func: cleanup_exec_environment
    - func: setup_kubernetes_environment
    - func: setup_cloud_qa
  tasks:
    - e2e_replica_set_tls_allow
    - e2e_replica_set_tls_prefer
    - e2e_replica_set_tls_require
    - e2e_replica_set_tls_require_upgrade
    - e2e_replica_set_tls_require_and_disable
    - e2e_tls_rs_additional_certs
    - e2e_tls_sc_additional_certs
    - e2e_tls_sc_additional_certs_transition
    - e2e_sharded_cluster_tls_require
    - e2e_standalone_no_tls_no_status_is_set
  teardown_task:
    - func: upload_e2e_logs
    - func: teardown_kubernetes_environment
    - func: teardown_cloud_qa

- name: e2e_scram_sha_task_group
  max_hosts: 3
  setup_group:
    - func: clone
    - func: download_kube_tools
  setup_task:
    - func: cleanup_exec_environment
    - func: setup_kubernetes_environment
    - func: setup_cloud_qa
  tasks:
    - e2e_replica_set_scram_sha_256_user_connectivity
    - e2e_replica_set_scram_sha_1_user_connectivity
    - e2e_replica_set_scram_sha_1_upgrade
    - e2e_replica_set_scram_x509_internal_cluster
    - e2e_sharded_cluster_scram_sha_1_upgrade
    - e2e_sharded_cluster_scram_sha_256_user_connectivity
    - e2e_sharded_cluster_scram_sha_1_user_connectivity
    - e2e_sharded_cluster_scram_x509_internal_cluster
  teardown_task:
    - func: upload_e2e_logs
    - func: teardown_kubernetes_environment
    - func: teardown_cloud_qa

- name: e2e_auth_transitions_task_group
  max_hosts: 3
  setup_group:
    - func: clone
    - func: download_kube_tools
  setup_task:
    - func: cleanup_exec_environment
    - func: setup_kubernetes_environment
    - func: setup_cloud_qa
  tasks:
    - e2e_replica_set_scram_sha_and_x509
    - e2e_replica_set_x509_to_scram_transition
    - e2e_sharded_cluster_scram_sha_and_x509
    - e2e_sharded_cluster_x509_to_scram_transition
  teardown_task:
    - func: upload_e2e_logs
    - func: teardown_kubernetes_environment
    - func: teardown_cloud_qa

# e2e_tls_custom_ca_task_group tests if the operator works with custom
# certificate authorities. This is not run on patch builds.
- name: e2e_tls_custom_ca_task_group
  setup_group:
    - func: clone
    - func: download_kube_tools
  setup_task:
    - func: cleanup_exec_environment
    - func: setup_kubernetes_environment
    - func: setup_cloud_qa
  tasks:
    - e2e_replica_set_tls_require_custom_ca
    - e2e_sharded_cluster_tls_require_custom_ca
    - e2e_tls_x509_sc_custom_ca
  teardown_task:
    - func: upload_e2e_logs
    - func: teardown_kubernetes_environment
    - func: teardown_cloud_qa

# The "others" tasks are those which cannot be run on 4.0 - only on 4.2+
- name: e2e_om_4_2_plus_only_task_group
  max_hosts: 1
  setup_group:
    - func: clone
    - func: download_kube_tools
  setup_task:
    - func: cleanup_exec_environment
    - func: setup_kubernetes_environment
    - func: setup_cloud_qa
  tasks:
    - e2e_sharded_cluster_scale_shards
    - e2e_replica_set_readiness_probe
    - e2e_tls_rs_external_access
    - e2e_tls_rs_external_access_tls_transition
    - e2e_replica_set_update_delete_parallel
  teardown_task:
    - func: upload_e2e_logs
    - func: teardown_kubernetes_environment
    - func: teardown_cloud_qa

- name: e2e_x509_task_group
  max_hosts: 3
  setup_group:
    - func: clone
    - func: download_kube_tools
  setup_task:
    - func: cleanup_exec_environment
    - func: setup_kubernetes_environment
    - func: setup_cloud_qa
    - func: setup_cert_manager
  tasks:
    - e2e_configure_tls_and_x509_simultaneously_st
    - e2e_configure_tls_and_x509_simultaneously_rs
    - e2e_configure_tls_and_x509_simultaneously_sc
    - e2e_tls_x509_rs
    - e2e_tls_x509_sc
    - e2e_tls_x509_configure_all_options_rs
    - e2e_tls_x509_configure_all_options_sc
    - e2e_tls_x509_user_connectivity
    - e2e_tls_x509_users_addition_removal
  teardown_task:
    - func: upload_e2e_logs
    - func: teardown_kubernetes_environment
    - func: teardown_cloud_qa

# e2e_mongodb_kind_only_task_group includes tests that mutate cluster-wide resources so should be
# run only on Kind
- name: e2e_mongodb_kind_only_task_group
  setup_group:
    - func: clone
    - func: download_kube_tools
  setup_task:
    - func: cleanup_exec_environment
    - func: setup_kubernetes_environment
    - func: setup_cloud_qa
  tasks:
    - e2e_op_upgrade_one_deployment
    - e2e_op_upgrade_replica_set
  teardown_task:
    - func: upload_e2e_logs
    - func: teardown_kubernetes_environment
    - func: teardown_cloud_qa

# This task group runs on Kind clusters. In theory ALL Ops Manager tests should be added here
# including the cluster-wide resources changing
- name: e2e_ops_manager_kind_only_task_group
  max_hosts: 10
  setup_group:
    - func: clone
    - func: download_kube_tools
  setup_task:
    - func: cleanup_exec_environment
    - func: setup_kubernetes_environment
    - func: setup_cloud_qa
    - func: setup_cert_manager
  tasks:
    - e2e_om_appdb_scale_up_down
    - e2e_om_appdb_upgrade
    - e2e_om_appdb_validation
    - e2e_om_appdb_scram
    - e2e_om_ops_manager_backup
    - e2e_om_ops_manager_backup_light
    - e2e_om_ops_manager_backup_tls
    - e2e_om_ops_manager_pod_spec
    - e2e_om_ops_manager_https_enabled
    - e2e_om_ops_manager_scale
    - e2e_om_ops_manager_upgrade
    - e2e_om_external_connectivity
    - e2e_op_upgrade_om
    - e2e_om_validation_webhook
    - e2e_om_jvm_params
  teardown_task:
    - func: upload_e2e_logs
    - func: teardown_kubernetes_environment
    - func: teardown_cloud_qa

# This task is identical to e2e_ops_manager_kind_only_task_group, with the exception that
# it will run 2 hosts at a time, not more. In shared cluster (Kops/Openshift) this means
# that the Ops Manager tests will not overload the cluster if run in parallel builds.
# Operator upgrade tests must not be included here!
- name: e2e_ops_manager_task_group_safe
  max_hosts: 2
  setup_group:
    - func: clone
    - func: download_kube_tools
  setup_task:
    - func: cleanup_exec_environment
    - func: setup_kubernetes_environment
  tasks:
    - e2e_om_appdb_scale_up_down
    - e2e_om_appdb_upgrade
    - e2e_om_appdb_validation
    - e2e_om_appdb_scram
    - e2e_om_ops_manager_backup
    - e2e_om_ops_manager_backup_light
    - e2e_om_ops_manager_pod_spec
    - e2e_om_ops_manager_scale
    - e2e_om_ops_manager_upgrade
    - e2e_om_external_connectivity
    - e2e_om_jvm_params
  teardown_task:
    - func: upload_e2e_logs
    - func: teardown_kubernetes_environment
    - func: teardown_cloud_qa


buildvariants:
- name: e2e_kube_vanilla_om_40_first
  display_name: "e2e_kube_vanilla_om_40_first"
  depends_on:
    - name: build_images_ubuntu
      variant: init_test_run
    - name: build_test_image
      variant: init_test_run
    - name: prepare_cluster_vanilla
      variant: init_test_run
  run_on:
  - archlinux-test
  stepback: false
  expansions:
    <<: *ops_manager_40_first
    <<: *kubernetes_environment_vanilla
    image_type: ubuntu
  tasks:
  - name: "e2e_core_task_group"
  - name: "e2e_tls_task_group"

# Note that both kops (current build variant) and openshift (next build variant) work with the same version of OM
# so in general they shouldn't intersect on OM-related tasks. Currently they intersect only on 'e2e_kube_only_task_group'
# and 'e2e_om_4_2_plus_only_task_group' as the latter must be run on both kops and openshift
- name: e2e_kube_vanilla_om_42_current
  display_name: "e2e_kube_vanilla_om_42_current"
  depends_on:
    - name: build_images_ubuntu
      variant: init_test_run
    - name: build_test_image
      variant: init_test_run
    - name: prepare_cluster_vanilla
      variant: init_test_run
  run_on:
  - archlinux-test
  stepback: false
  expansions:
    <<: *ops_manager_42_current
    <<: *kubernetes_environment_vanilla
    image_type: ubuntu
  tasks:
  - name: "e2e_kube_only_task_group"
  - name: "e2e_om_4_2_plus_only_task_group"
  - name: "e2e_tls_task_group"
  - name: "e2e_scram_sha_task_group"
  - name: "e2e_auth_transitions_task_group"

- name: e2e_openshift4_cloud_qa
  display_name: e2e_openshift4_cloud_qa
  depends_on:
    - name: build_images_rhel
      variant: init_test_run
    - name: build_test_image
      variant: init_test_run
  run_on:
  - archlinux-test
  stepback: false
  expansions:
    <<: *cloud_manager_qa
    <<: *kubernetes_environment_openshift_4
    image_type: rhel
  tasks:
  - name: e2e_kube_only_task_group
  - name: e2e_scram_sha_task_group

- name: e2e_kube_vanilla_ops_manager
  display_name: "e2e_kube_vanilla_ops_manager"
  depends_on:
    - name: build_images_ubuntu
      variant: init_test_run
    - name: build_test_image
      variant: init_test_run
    - name: build_om_images_ubuntu
      variant: init_test_run
    - name: prepare_cluster_vanilla_om
      variant: init_test_run
  run_on:
    - archlinux-test
  stepback: false
  expansions:
    cluster_name: "e2e.om.mongokubernetes.com"
    <<: *kubernetes_environment_vanilla
    test_mode: "opsmanager"
    image_type: ubuntu
    always_remove_testing_namespace: "true"
  tasks:
    - name: e2e_ops_manager_task_group_safe

- name: e2e_openshift4_ops_manager
  display_name: e2e_openshift4_ops_manager
  depends_on:
    - name: build_images_rhel
      variant: init_test_run
    - name: build_test_image
      variant: init_test_run
    - name: build_om_images_rhel
      variant: init_test_run
  run_on:
    - archlinux-test
  stepback: false
  expansions:
    <<: *kubernetes_environment_openshift_4
    test_mode: opsmanager
    image_type: rhel
    always_remove_testing_namespace: "true"
  tasks:
    - name: e2e_ops_manager_task_group_safe

- name: release_rh_connect
  display_name: release_rh_connect
  depends_on:
    - name: release_blocker
      variant: release_blocker
  run_on:
    - ubuntu1604-test
  expansions:
    docker_registry: scan.connect.redhat.com
    docker_username: unused
  tasks:
    # - name: release_ops_manager_rh_connect
    - name: release_operator_rh_connect

- name: release_quay_ubuntu
  display_name: release_quay_ubuntu
  depends_on:
    - name: release_blocker
      variant: release_blocker
  run_on:
    - ubuntu1604-test
  expansions:
    docker_registry: quay.io
    distro: ubuntu
    suffix: ""
  tasks:
    - name: release_ops_manager_quay
    - name: release_operator_quay

- name: release_quay_ubi
  display_name: release_quay_ubi
  depends_on:
    - name: release_blocker
      variant: release_blocker
  run_on:
    - ubuntu1604-test
  expansions:
    docker_registry: quay.io
    distro: rhel
    suffix: -ubi
  tasks:
    - name: release_ops_manager_quay
    - name: release_operator_quay

- name: release_blocker
  display_name: release_blocker
  run_on:
  - ubuntu1604-packer  # Note: cheapest machine I found
  tasks:
  - name: release_blocker

- name: init_test_run
  display_name: init_test_run
  run_on:
  - archlinux-test
  stepback: false
  tasks:
  - name: build_images_rhel
  - name: build_images_ubuntu
  - name: build_test_image
  - name: build_om_images_ubuntu
  - name: build_om_images_rhel
  - name: prepare_cluster_vanilla
  - name: prepare_cluster_vanilla_om
  - name: prepare_aws

# Runs on master patches. This will populate the mongodb/mongodb-enterprise-*-prerelease
# registries with the images that were pushed to master
- name: prerelease_master_images
  display_name: prerelease_master_images
  run_on:
  - ubuntu1604-test
  depends_on:
  - name: build_images_ubuntu
    variant: init_test_run
  - name: build_om_images_ubuntu
    variant: init_test_run
  expansions:
    docker_registry: quay.io
  tasks:
  - name: prerelease_master_images

- name: go_unit_tests
  display_name: "go_unit_tests"
  run_on:
  - archlinux-test
  stepback: false
  tasks:
    - name: "unit_task_group"

# Isolated Ops Manager Tests
- name: e2e_kind_ops_manager
  display_name: e2e_kind_ops_manager
  run_on:
  - ubuntu1604-build
  depends_on:
  - name: build_images_rhel
    variant: init_test_run
  - name: build_test_image
    variant: init_test_run
  - name: build_om_images_rhel
    variant: init_test_run
  expansions:
    <<: *kubernetes_environment_kind
    image_type: rhel
    test_mode: opsmanager
  tasks:
  - name: e2e_ops_manager_kind_only_task_group

- name: e2e_kind_cloud_qa
  display_name: e2e_kind_cloud_qa
  run_on:
  - ubuntu1604-build
  depends_on:
  - name: build_images_ubuntu
    variant: init_test_run
  - name: build_test_image
    variant: init_test_run
  expansions:
    <<: *cloud_manager_qa
    <<: *kubernetes_environment_kind
    image_type: ubuntu
  tasks:
  - name: e2e_kube_only_task_group
  - name: e2e_core_task_group
  - name: e2e_tls_task_group
  - name: e2e_om_4_2_plus_only_task_group
  - name: e2e_x509_task_group
  - name: e2e_scram_sha_task_group
  - name: e2e_auth_transitions_task_group
  - name: e2e_webhook_validation_task_group
  - name: e2e_mongodb_kind_only_task_group

# build OpsManager: to be launched independently of the operator build process
- name: build_and_push_ops_manager_images
  display_name: build_and_push_ops_manager_images
  run_on:
  - ubuntu1604-build
  tasks:
    - name: build_and_push_ops_manager_ubuntu
    - name: build_and_push_ops_manager_ubi
  expansions:
    # removing 4.2.2, 4.2.5 and 4.2.9 as per https://www.mongodb.com/subscription/downloads/archived
    VERSIONS: "4.2.0 4.2.1 4.2.3 4.2.4 4.2.6 4.2.7 4.2.8 4.2.10 4.2.11"
