stepback: true

functions:
  "clone":
    - command: shell.exec
      params:
        script: |
          mkdir -p src/github.com/10gen
    - command: git.get_project
      type: system
      params:
        directory: src/github.com/10gen/ops-manager-kubernetes

  "test_operator":
    - command: shell.exec
      type: system
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        script: |
          export WORKDIR=${workdir}
          CONTINUE=true ./scripts/evergreen/build_operator

  "build_operator":
    - command: shell.exec
      type: system
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        script: |
          export WORKDIR=${workdir}
          SKIP_TESTING=true ./scripts/evergreen/build_operator

    - command: s3.put
      params:
        aws_key: ${mms_build_s3_aws_access_key}
        aws_secret: ${mms_build_s3_aws_secret}
        local_file: src/github.com/10gen/ops-manager-kubernetes/docker/mongodb-enterprise-operator/content/mongodb-enterprise-operator
        remote_file: ops-manager-operator/${revision}/mongodb-enterprise-operator
        bucket: ops-manager-kubernetes-build
        permissions: public-read
        content_type: application/octet-stream

  "setup_aws":
    - command: shell.exec
      params:
        shell: bash
        script: |
            src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/setup_aws

  "setup_docker":
    - command: shell.exec
      params:
          shell: bash
          script: |
            src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/setup_docker

  "setup_kubectl":
    - command: shell.exec
      params:
        shell: bash
        script: |
          export WORKDIR=${workdir}
          export BINDIR=$WORKDIR/bin ; mkdir -p $BINDIR
          export PATH=$BINDIR:$PATH

          # AWS creds
          export AWS_ACCESS_KEY_ID=${mms_eng_test_aws_access_key}
          export AWS_SECRET_ACCESS_KEY=${mms_eng_test_aws_secret}
          export AWS_REGION=${mms_eng_test_aws_region}
          export KOPS_STATE_STORE=s3://dev02-mongokubernetes-com-state-store
          export CLUSTER=dev02.mongokubernetes.com

          echo "Downloading kubectl"
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.10.0/bin/linux/amd64/kubectl
          chmod +x kubectl
          mv kubectl $BINDIR

          echo "Downloading kops"
          curl -L https://github.com/kubernetes/kops/releases/download/1.9.1/kops-linux-amd64 -o kops
          chmod +x kops
          mv kops $BINDIR
          kops export kubecfg $CLUSTER

          echo "Downloading helm"
          HELM=helm.tgz
          curl https://storage.googleapis.com/kubernetes-helm/helm-v2.10.0-linux-amd64.tar.gz --output $HELM
          tar xfz $HELM
          mv linux-amd64/helm $BINDIR
          rm $HELM

          echo "Downloading OC"
          OC_PKG=oc-linux.tar.gz
          curl -L https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz --output $OC_PKG
          tar xfz $OC_PKG
          mv openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit/oc $BINDIR


  "gotest_parse_files":
    - command: gotest.parse_files
      params:
        files: ["*.suite", "src/**/*.suite"]

  "check_evergreen_health":
    - command: shell.exec
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        script: |
          echo "Checking Evergreen Host Health"
          REVISION=${revision}
          echo "REVISION is $REVISION"

          echo "IS_PATCH: ${is_patch}"
          echo "AUTHOR: ${author}"
          echo "TASK_ID: ${task_id}"
          echo "TASK_NAME: ${task_name}"
          echo "EXECUTION: ${execution}"
          echo "BUILD_ID: ${build_id}"
          echo "BUILD_VARIANT: ${build_variant}"
          echo "VERSION_ID: ${version_id}"
          echo "WORKDIR: ${workdir}"
          echo "REVISION: ${revision}"
          echo "PROJECT: ${project}"
          echo "BRANCH_NAME: ${branch_name}"
          echo "DISTRO_ID: ${distro_id}"
          echo "CREATED_AT: ${created_at}"
          echo "REVISION_ORDER_ID: ${revision_order_id}"
          echo "GITHUB_PR_NUMBER: ${github_pr_number}"
          echo "GITHUB_ORG: ${github_org}"
          echo "GITHUB_REPO: ${github_repo}"
          echo "GITHUB_AUTHOR: ${github_author}"
          echo "HOME: ${HOME}"


          MAX_PERCENT_USED=80
          ROOT_DISK_USED=$(df / | tail -1 | awk ' { print $5 } ' | cut -d"%" -f 1)
          if [ "$ROOT_DISK_USED" -gt "$MAX_PERCENT_USED" ]; then
              printf "More than %s%% used in root partition. Currently used disk %s%%\\n" $MAX_PERCENT_USED $ROOT_DISK_USED
              df /
              exit 1
          fi

          MCI_DIR=/data/mci
          if [ -d $MCI_DIR ]; then
              DATA_DISK_USED=$(df $MCI_DIR | tail -1 | awk ' { print $5 } ' | cut -d"%" -f 1)
              if [ "$DATA_DISK_USED" -gt "$MAX_PERCENT_USED" ]; then
                  printf "Less than %s%% in %s. Currently used disk %s%%\\n" $MAX_PERCENT_USED $MCI_DIR $DATA_DISK_USED
                  df $MCI_DIR
                  exit 1
              fi
          else
              echo "$MCI_DIR does not exists"
              exit
          fi

  "build_and_push_image":
    - command: shell.exec
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        script: |
          set +x
          # Releases are performed only for patches
          if [ -n "${release_object}" ] && [ "${is_patch}" != "true" ]; then
            echo "Releasing is done only from patches"
            exit 0
          fi

          # AWS creds
          export AWS_ACCESS_KEY_ID=${mms_eng_test_aws_access_key}
          export AWS_SECRET_ACCESS_KEY=${mms_eng_test_aws_secret}

          # Quay prod creds
          export QUAY_PROD_USER=${quay_prod_username}
          export QUAY_PROD_PASSWORD=${quay_prod_robot_token}

          if [ "${create_git_sha_tags}" = "true" ]; then
            export REVISION=$(git rev-parse HEAD)
          fi

          python3 -m venv venv
          source venv/bin/activate
          python3 -m pip install -r scripts/evergreen/requirements.txt

          # Always consider the caveat of "${var} vs $var" in evergreen!!
          docker_args="${docker_args}"

          # Releases override REVISION from predefined tags
          if [ -n "${release_object}" ]; then
            export REVISION=$(./scripts/evergreen/read_release_version.py --release-app ${release_object})

            # When releasing mongodb enterprise the docker tag and version of MongoDB are the same
            if [ "${release_object}" = "mongodbEnterprise" ]; then
              export docker_args="MONGO_VERSION=$REVISION"
            fi
          fi

          ./scripts/evergreen/build_and_push.py \
              --image ${image_name} \
              --tag "$REVISION" \
              --registry "${env}" \
              --path "${path}" \
              --docker-args "$docker_args"

  "e2e_test":
    - command: shell.exec
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen
        script: |
          # revision is only supposed to be set in evergreen
          export WORKDIR=${workdir}
          export IS_EVERGREEN=${revision}
          export REVISION=$(git rev-parse HEAD)
          export PATH=${workdir}/bin:$PATH
          export MANAGED_SECURITY_CONTEXT="false"

          echo "Build Variant: ${build_variant}"
          set -e # fail on first failed test

          if [ "${build_variant}" = "e2e_kube_vanilla_v1.10" ]; then
            echo "Nothing to setup for this variant"
          elif [ "${build_variant}" = "e2e_openshift_origin_v3.11" ]; then
            echo "Setting up OpenShift variant"
            oc login ${openshift_cluster_url} --token=${openshift_cluster_token} --insecure-skip-tls-verify
            kubectl config use-context default/master-openshift-cluster-mongokubernetes-com:8443/admin
            export MANAGED_SECURITY_CONTEXT="true"
          fi

          # A complete environment is set each time.
          TEST_STAGE=${test_name} ./e2e_tests.sh

  "post_task":
  - command: shell.exec
    params:
      script: |
        if [ ! "$(which docker)" ]; then
          # if not docker present, no images either.
          exit 0
        fi

        echo "Removing all docker images in this machine"
        docker rmi -f $(docker images -a -q) &> /dev/null || true

        echo "Are there any remaining Docker images in this host?"
        docker images

post:
   - func: "post_task"

tasks:
- name: test
  tags: ["test"]
  commands:
    - func: "clone"
    - func: "test_operator"
    - func: "gotest_parse_files"

- name: release_operator
  tags: ["release_operator"]
  commands:
    - func: "clone"
    - func: "build_operator"
    - func: "setup_docker"
    - func: "build_and_push_image"
      vars:
        release_object: "mongodbOperator"
        env: production
        image_name: mongodb-enterprise-operator
    - func: "build_and_push_image"
      vars:
        release_object: "mongodbOperator"
        env: production
        image_name: mongodb-enterprise-database

# Note that this task doesn't work so far as it needs different quay account and token
- name: release_mongodb_enterprise
  tags: ["release_mongodb_enterprise"]
  commands:
    - func: "clone"
    - func: "setup_docker"
    - func: "build_and_push_image"
      vars:
        release_object: "mongodbEnterprise"
        env: production
        image_name: mongodb-enterprise
        path: mongodb-enterprise/4.0

- name: build_and_push_images_development
  tags: ["build_and_push_images_development"]
  commands:
    - func: "clone"
    - func: "build_operator"
    - func: "setup_docker"
    - func: "setup_aws"
    - func: "build_and_push_image"
      vars:
        env: development
        image_name: mongodb-enterprise-operator
        create_git_sha_tags: "true"
    - func: "build_and_push_image"
      vars:
        env: development
        image_name: mongodb-enterprise-database
        create_git_sha_tags: "true"
- name: setup_e2e
  commands:
    - func: "clone"
    - func: "check_evergreen_health"
    - func: "setup_aws"
    - func: "setup_docker"
    - func: "build_operator"
    - func: "build_and_push_image"
      vars:
        env: development
        image_name: mongodb-enterprise-operator
        create_git_sha_tags: "true"
    - func: "build_and_push_image"
      vars:
        env: development
        image_name: mongodb-enterprise-database
        create_git_sha_tags: "true"
    - func: "build_and_push_image"
      vars:
        env: development
        image_name: mongodb-enterprise-tests
        create_git_sha_tags: "true"
- name: e2e_rs_base
  commands:
    - func: "e2e_test"
      vars:
        test_name: replica_set_base
- name: e2e_rs_ent
  commands:
    - func: "e2e_test"
      vars:
        test_name: replica_set_ent
- name: e2e_rs_pv
  commands:
    - func: "e2e_test"
      vars:
        test_name: replica_set_pv
- name: e2e_rs_pv_multiple
  commands:
    - func: "e2e_test"
      vars:
        test_name: replica_set_pv_multiple

task_groups:
- name: e2e_task_group
  max_hosts: 100
  setup_group:
    - func: "clone"
    - func: "setup_kubectl"
  tasks:
    - e2e_rs_base
    - e2e_rs_ent
    - e2e_rs_pv
    - e2e_rs_pv_multiple

buildvariants:

- name: test
  run_on:
     - archlinux-test
  stepback: true
  tasks:
    - ".test"

- name: release_operator
  run_on:
    - archlinux-test
  tasks:
    - ".release_operator"

- name: build_and_push_images_development
  run_on:
    - archlinux-test
  batchtime: 1440
  stepback: false
  tasks:
    - ".build_and_push_images_development"

- name: e2e_kube_vanilla_v1.10
  run_on:
  - archlinux-test
  batchtime: 1440
  setpback: false
  tasks:
  - name: "setup_e2e"
  - name: "e2e_task_group"
    depends_on:
    - name: setup_e2e

- name: e2e_openshift_origin_v3.11
  run_on:
  - archlinux-test
  batchtime: 1440
  setpback: false
  tasks:
   - name: "setup_e2e"
   - name: "e2e_task_group"
     depends_on:
     - name: setup_e2e
