stepback: true

functions:
  "clone":
    - command: shell.exec
      params:
        script: |
          mkdir -p src/github.com/10gen
    - command: git.get_project
      type: system
      params:
        directory: src/github.com/10gen/ops-manager-kubernetes
  "build_operator":
    - command: shell.exec
      type: system
      params:
        script: |
          src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/build_operator
    - command: s3.put
      params:
        aws_key: ${mms_build_s3_aws_access_key}
        aws_secret: ${mms_build_s3_aws_secret}
        local_file: src/github.com/10gen/ops-manager-kubernetes/docker/mongodb-enterprise-operator/content/mongodb-enterprise-operator
        remote_file: ops-manager-operator/${revision}/mongodb-enterprise-operator
        bucket: ops-manager-kubernetes-build
        permissions: public-read
        content_type: application/octet-stream
  "setup_aws":
    - command: shell.exec
      params:
        shell: bash
        script: |
            src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/setup_aws
  "setup_docker":
    - command: shell.exec
      params:
          shell: bash
          script: |
            src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/setup_docker
  "build_images":
    - command: shell.exec
      params:
          shell: bash
          script: |
            src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/build_docker_image mongodb-enterprise-database
            src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/build_docker_image mongodb-enterprise-operator

  "upload_images":
    - command: shell.exec
      params:
          script: |
            export AWS_ACCESS_KEY_ID=${mms_eng_test_aws_access_key}
            export AWS_SECRET_ACCESS_KEY=${mms_eng_test_aws_secret}
            export QUAY_ROBOT_TOKEN=${quay_robot_token}

            if [ "${is_patch}" = "true" ]; then
              echo "Not uploading - this is a patch build"
              exit 0
            else
              echo "Uploading - this is not a patch build"
            fi
            src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/upload_docker_image mongodb-enterprise-database
            src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/upload_docker_image mongodb-enterprise-operator

  "gotest_parse_files":
    - command: gotest.parse_files
      params:
        files: ["*.suite", "src/**/*.suite"]

  "release":
    - command: shell.exec
      params:
        working_dir: src/github.com/10gen/ops-manager-kubernetes
        script: |
          # skip if patch
          if [ "${is_patch}" = "true" ]; then
            echo "Releasing only on `patch` stage."
            exit 0
          else
            echo "Not releasing during normal run ${tag}"
            exit 0
          fi

          # src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/init_virtualenv.sh ${working_dir}
          # VIRTUAL_ENV_DISABLE_PROMPT=true source ./venv-activate
          # pip install -r src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/requirements.txt
          # tag=$(cat src/github.com/10gen/ops-manager-kubernetes/.release.yaml | grep currentVersion | awk '{ print $2 }')
          # src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/build_and_release.py --image operator --tag ${tag}
          # src/github.com/10gen/ops-manager-kubernetes/scripts/evergreen/build_and_release.py --image database --tag ${tag}

tasks:

- name: build_and_upload
  tags: ["build_and_upload"]
  commands:
    - func: "clone"
    - func: "build_operator"
    - func: "setup_aws"
    - func: "setup_docker"
    - func: "build_images"
    - func: "upload_images"

- name: test
  tags: ["test"]
  commands:
    - func: "clone"
    - func: "build_operator"
    - func: "gotest_parse_files"

- name: release
  tags: ["release"]
  commands:
    - func: "clone"
    - func: "release"


buildvariants:

- name: build_and_upload
  run_on:
    # Until https://jira.mongodb.org/browse/MCI-2851, the Evergreen team requested that we use this
    # distro to avoid our installation of docker affecting Server performance tests unpredictably
     - archlinux-test
  batchtime: 1440 # 1 day
  stepback: false
  tasks:
    - ".build_and_upload"

- name: test
  run_on:
     - archlinux-test
  batchtime: 1440 # 1 day
  stepback: false
  tasks:
    - ".test"

- name: release
  run_on:
    - archlinux-test
  tasks:
    - ".release"
